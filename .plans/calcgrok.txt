```plaintext
AGENTE “NÚCLEO DE CONVERSÕES” – Fase 0/1 (Core Python + Base Exaustiva)
Missão

1. Entregar um núcleo Python de conversões determinístico e testável.

2. Produzir catálogos exaustivos de unidades e analitos (íons, moléculas) com massas molares, valências e fatores clínicos.

3. Especificar (em JSON) as 3 calculadoras de infusão já existentes no repo (gotejamento, μg/kg/min↔mL/h, μg/kg/min↔gtt/min) para consumo direto pelo Agente Codificador.

4. Documentar contratos de chamada (Python e REST) e testes golden.

Você tem acesso aos conteúdos (Whitebook/UpToDate) que recebemos, pode pesquisar fontes confiáveis adicionais, e deve cobrir tudo exaustivamente. O resultado precisa ser autossuficiente para o Agente Codificador implementar sem ambiguidade.
Entradas e contexto

* Repositório: https://github.com/hugoeg123/HG (ver tag v1.3, há 3 calculadoras de infusão no frontend).

* Lista base de dimensões/unidades (ponto de partida do Orquestrador):
  Categoria Unidades alvo (núcleo) Massa mcg/μg, mg, g, kg Volume mL, L Concentração mg/dL, g/dL, mg/L, g/L, ng/mL, μg/mL, mmol/L, mEq/L, μmol/L, nmol/L, pmol/L, kU/L, IU/mL Atividade enzimática U/L, mU/mL, kU/L, μkat/L Pressão mmHg, kPa Tempo s, min, h, dia, semana Taxas/velocidades gtt/min, mL/h, μg/kg/min Outros células×10⁹/L, células/μL, %, IU

* Domínios/alvos a cobrir em analitos: eletrólitos (Na⁺, K⁺, Cl⁻, HCO₃⁻, Ca²⁺, Mg²⁺, fosfato), metabólitos (glicose, ureia/BUN, creatinina, ácido úrico), lipídios (CT/LDL/HDL, TG), hepáticos/enzimas (ALT/AST, ALP, GGT, bilirrubina), endócrinos (TSH, T4/T3, cortisol, prolactina, insulina), vitaminas (25-OH D, B12, etc.), marcadores (ferritina, PCR), catecolaminas e metabólitos (epinefrina, norepinefrina, metanefrinas, VMA, 5-HIAA).

Entregáveis (estrutura e conteúdo)

```
core/
  README.md                      # visão geral, decisões, limites, referências
  units/
    units.factors.json           # TUDO sobre dimensões/unidades (vide abaixo)
    units.synonyms.json          # sinônimos e formas (ex.: mesmo horário de início,
    conversion_core.py           # API Python do motor de conversão (ver assinaturas)
  analytes/
    analytes.catalog.json        # cada analito: nomes, M (g/mol), valência, unidades, fatores clínicos
    analytes.synonyms.json       # sinônimos PT/EN, abreviações
  calculators/
    infusion.drops_mlh.json      # gtt/min ↔ mL/h (expressões, I/O, validação, exemplos)
    infusion.mcgkgmin_mlh.json   # μg/kg/min ↔ mL/h
    infusion.mcgkgmin_gttmin.json# μg/kg/min ↔ gtt/min
  tests/
    units_roundtrip.cases.json   # roundtrip e tolerâncias p/ unidades
    infusion_drops.cases.json
    infusion_mcgkgmin_mlh.cases.json
    infusion_mcgkgmin_gtt.cases.json
  api/
    openapi.yaml                 # contrato REST v1 (convert/compute)
    examples/
      convert_units.request.json
      compute_infusions.request.json
```

1) units.factors.json (exaustivo e normalizado)

* Dimensões: mass, volume, time, pressure, activity, count, fraction, rate_flow (mL/h), rate_drop (gtt/min), conc_mass_vol, conc_substance_vol.

* Unidade base por dimensão (ex.: kg para massa, L para volume, s para tempo).

* Fatores exatos de SI (ex.: 1 g = 0.001 kg; 1 mL = 0.001 L; 1 min = 60 s; 1 mmHg = 133.322 kPa/1000).

* Clínicos canônicos (ex.: glicose mg/dL↔mmol/L, colesterol, triglicerídeo, creatinina mg/dL↔μmol/L, bilirrubina mg/dL↔μmol/L).

* Regras mEq↔mmol por valência (monovalente 1:1; divalente 2:1).

* Precisão sugerida por unidade (casas decimais) e tolerância numérica para testes.

2) units.synonyms.json

* Mapeie variações: ["mcg","µg","ug"]→"µg", ["IU","UI"]→"IU", ["gtt/min","gts/min"]→"gtt/min", etc.

3) analytes.catalog.json
Para cada analito/ânion/cátion/molécula:

```json
{
  "key": "creatinine",
  "category": "renal",
  "names": ["Creatinina"],
  "synonyms": ["Cr", "Crn"],
  "molar_mass_g_per_mol": 113.12,
  "valence": 0,
  "units_allowed": ["mg/dL","µmol/L"],
  "canonical_conversions": [
    { "from": "mg/dL", "to": "µmol/L", "factor": 88.4, "source": "consenso clínico" }
  ],
  "notes": "Usar SI internamente."
}
```

* Para íons: inclua valence correto (ex.: Na⁺=+1, Ca²⁺=+2).

* Para enzimas/atividades: relacione U/L↔μkat/L.

* Para hormônios/vitaminas: relacione massa↔molar quando consensual ou registre unidade canônica (e observação quando não há conversão direta universal).

* Cobertura completa das famílias citadas nas entradas e anexos.

4) Calculadoras de infusão (arquivos JSON)
Um mesmo esquema para as 3 calculadoras. Exemplo (gotejamento):

```json
{
  "id": "infusion.drops_mlh",
  "name": "Gotas/min ↔ mL/h",
  "version": "1.0.0",
  "inputs": [
    {"id":"drops_count","label":"Gotas contadas","type":"integer","unit":"gtt","min":1},
    {"id":"time_seconds","label":"Tempo","type":"number","unit":"s","min":1},
    {"id":"drop_factor","label":"Fator de gotejamento","type":"number","unit":"gtt/mL","min":5,"max":120}
  ],
  "expressions": {
    "gtt_per_min": "(drops_count) / (time_seconds/60)",
    "ml_per_h": "(gtt_per_min / drop_factor) * 60"
  },
  "outputs": [
    {"id":"gtt_per_min","unit":"gtt/min","decimals":0},
    {"id":"ml_per_h","unit":"mL/h","decimals":1}
  ],
  "examples":[
    {"in":{"drops_count":30,"time_seconds":20,"drop_factor":20},"out":{"gtt_per_min":90,"ml_per_h":270.0}}
  ],
  "notes":"Tap mode: calcula gtt/min ao encerrar a contagem.",
  "references":["Whitebook/UpToDate/consenso institucional"]
}
```

Repita para:

* μg/kg/min ↔ mL/h:\
  ml_per_h = (rate_mcgkgmin * weight_kg * 60) / (1000 * concentration_mg_ml)\
  rate_mcgkgmin = (ml_per_h * concentration_mg_ml * 1000) / (60 * weight_kg)

* μg/kg/min ↔ gtt/min:\
  ml_per_h = gtt_per_min * (60 / drop_factor) + fórmulas acima; ou direto para gtt/min.

5) Testes (golden & propriedade)

* units_roundtrip.cases.json: ida-e-volta (ex.: mg/dL→mmol/L→mg/dL) dentro de tolerância.

* Casos por calculadora (≥5 cada), incluindo bordas (fator 60/20, pesos extremos, concentração muito baixa/alta).

* Metadados de tolerância (absTol/relTol) por campo.

6) conversion_core.py (API Python do motor)
Assinaturas mínimas:

```python
from typing import Optional, Dict, Any

def normalize_unit(u: str) -> str: ...
def convert_value(value: float, from_unit: str, to_unit: str,
                  analyte: Optional[str] = None, valence: Optional[int] = None) -> float: ...
def get_analyte(key_or_name: str) -> Dict[str, Any]: ...
def list_units() -> Dict[str, Any]: ...
def list_analytes(category: Optional[str] = None) -> Dict[str, Any]: ...
```

Regras:

* Sempre converter para SI internamente e retornar na unidade solicitada.

* Para mEq↔mmol, use valência do íon.

* Para massa↔molar, use molar_mass_g_per_mol do analito.

7) Contrato REST (OpenAPI – /api/v1)

* POST /convert/units\
  Request: { "value":180, "from":"mg/dL", "to":"mmol/L", "analyte":"glucose" }\
  Response: { "value": 9.99, "unit": "mmol/L", "norm": {...} }

* GET /calculators → lista metadados.

* GET /calculators/{id} → schema inputs/outputs.

* POST /calculators/{id}/compute → executa expressão e devolve resultado + explicação (strings com fórmulas).

Inclua openapi.yaml e exemplos em api/examples/.
Como trabalhar (passo-a-passo)

1. Mapeamento exaustivo de unidades

   * A partir da tabela base + materiais, liste todas as unidades realmente usadas em prática.

   * Para cada dimensão, defina unidade base, fatores exatos/consensuais e precisão.

2. Catálogo exaustivo de analitos

   * Cobrir todos os grupos citados.

   * Para cada item: nomes/sinônimos PT/EN, M (g/mol), valence, unidades aceitas e fatores canônicos.

   * Onde não houver consenso (ex.: alguns hormônios por método), documente a unidade canônica e não invente fator.

3. Normalização de sinônimos

   * Unifique símbolos conflituosos (mcg/µg/ug; IU/UI; gtt/gts).

   * Produza units.synonyms.json e analytes.synonyms.json.

4. Especificar as 3 calculadoras de infusão

   * Em JSON (esquema acima), com inputs, expressões, outputs, exemplos e validação.

5. Testes

   * units_roundtrip e casos de calculadora (≥5 cada).

   * Documentar tolerâncias.

6. Documentação (README.md)

   * Decisões (SI interno, valência, arredondamento), limites, fontes, como evoluir.

Como o Agente Codificador vai chamar/usar/integrar
Python (uso direto do core)

```python
from core.units.conversion_core import convert_value
mmol = convert_value(180, "mg/dL", "mmol/L", analyte="glucose")

from core.units.conversion_core import list_units, list_analytes
units = list_units()
eletr = list_analytes(category="electrolyte")
```

REST (backend Django/DRF)

* POST /api/v1/convert/units com o JSON acima.

* POST /api/v1/calculators/infusion.mcgkgmin_mlh/compute

  ```json
  {
    "inputs": {
      "weight_kg": 70,
      "rate_mcgkgmin": 0.1,
      "concentration_mg_ml": 0.08
    },
    "options": { "output_units": { "rate": "mL/h" } }
  }
  ```

Frontend (HG v1.3)

* Gerar UI a partir dos JSONs de calculadoras (labels/validação/decimais).

* Converter para SI ou enviar como está e deixar o backend normalizar (mas seja consistente).

* Exibir fórmulas e botão copiar; manter favoritos e recentes.

Critérios de aceitação (checklist)

* units.factors.json cobre todas as unidades listadas + usadas no projeto.

* analytes.catalog.json cobre todos os grupos (eletrólitos, metabólitos, enzimas, hormônios, vitaminas, marcadores).

* Sinônimos normalizados (unidades e analitos).

* 3 calculadoras de infusão especificadas em JSON (inputs/outputs/expressões/validação/exemplos).

* Testes golden e round-trip com tolerâncias.

* conversion_core.py com as assinaturas mínimas implementadas.

* openapi.yaml + exemplos de request/response.

* README com decisões, limites e referências.

Observações finais

* SI como verdade interna.

* Valência para mEq↔mmol.

* Massas molares documentadas (fonte confiável).

* Nada “implícito”: tudo versionado e com tolerâncias.

* Estrutura pronta para o Codificador plug-and-play (Python e/ou REST).
```
core/README.md
============

# Núcleo de Conversões para HG (Hugo's Groove) - v1.0

## Visão Geral
Este núcleo fornece um motor determinístico para conversões de unidades clínicas, catálogos de analitos (com massas molares, valências e fatores) e especificações para calculadoras de infusão. É projetado para ser testável, exaustivo e integrado ao repositório https://github.com/hugoeg123/HG (tag v1.3, que já inclui 3 calculadoras de infusão no frontend).

O foco é em precisão clínica (baseado em Whitebook/UpToDate, PubChem para massas molares, e consensos como SI para lab). Usamos SI internamente (ex.: kg, L, mol, s) para conversões. Limites: não cobre conversões não-lineares ou dependentes de contexto (ex.: pH); para enzimas, assume fatores consensuais, mas nota variações por método/assay.

## Decisões Principais
- **SI Interno**: Todas conversões vão para SI base (ex.: massa → kg, volume → L, concentração → mol/L) e voltam.
- **Valência para mEq/mmol**: Usa valence do analito (ex.: Na⁺=1, Ca²⁺=2). mEq/L = (mmol/L) * |valence|.
- **Massas Molares**: De PubChem/NIST; arredondadas a 2-4 decimais clínicas.
- **Tolerâncias**: relTol=1e-6, absTol=1e-9 para roundtrips; precisão por unidade em JSON.
- **Sinônimos**: Normalizados para canônicos (ex.: mcg → µg).
- **Calculadoras**: Especificadas em JSON para parse no backend; expressões simbólicas simples (avalia com eval seguro).
- **Limites**: Não inventa fatores sem consenso (ex.: alguns hormônios ficam em unidade canônica). Não cobre temperatura/energia além do básico.
- **Integração com HG v1.3**: Backend usa conversion_core.py diretamente; frontend gera UI de JSONs (inputs/validação); REST para API externa.

## Referências
- UpToDate/Whitebook: Fatores clínicos (ex.: glicose mg/dL↔mmol/L=18.015; creatinina=88.4).
- PubChem: Massas molares (ex.: https://pubchem.ncbi.nlm.nih.gov/compound/Creatinine).
- SI/NIST: Fatores exatos (https://www.nist.gov/pml/special-publication-811).
- Consensos: ADA para A1c; ESC para lipídios.
- Infusão: Whitebook infusão (gotejamento 20/60 gtt/mL; fórmulas padrão).

## Como Evoluir
- Adicione unidades/analitos em JSONs (sem quebrar API).
- Testes: Rode com pytest sobre cases.json.

core/units/units.factors.json
=============================
{
  "dimensions": {
    "mass": { "base": "kg", "units": {
      "kg": { "factor_to_base": 1, "precision": 3 },
      "g": { "factor_to_base": 0.001, "precision": 2 },
      "mg": { "factor_to_base": 1e-6, "precision": 1 },
      "µg": { "factor_to_base": 1e-9, "precision": 0 },
      "ng": { "factor_to_base": 1e-12, "precision": 0 }
    }},
    "volume": { "base": "L", "units": {
      "L": { "factor_to_base": 1, "precision": 2 },
      "mL": { "factor_to_base": 0.001, "precision": 1 },
      "µL": { "factor_to_base": 1e-6, "precision": 0 }
    }},
    "time": { "base": "s", "units": {
      "s": { "factor_to_base": 1, "precision": 0 },
      "min": { "factor_to_base": 60, "precision": 0 },
      "h": { "factor_to_base": 3600, "precision": 0 },
      "dia": { "factor_to_base": 86400, "precision": 0 },
      "semana": { "factor_to_base": 604800, "precision": 0 }
    }},
    "pressure": { "base": "Pa", "units": {
      "Pa": { "factor_to_base": 1, "precision": 0 },
      "kPa": { "factor_to_base": 1000, "precision": 1 },
      "mmHg": { "factor_to_base": 133.322, "precision": 0 }
    }},
    "activity_enzymatic": { "base": "kat", "units": {
      "kat": { "factor_to_base": 1, "precision": 3 },
      "µkat": { "factor_to_base": 1e-6, "precision": 2 },
      "U": { "factor_to_base": 1.6667e-8, "precision": 0 },
      "mU": { "factor_to_base": 1.6667e-11, "precision": 0 },
      "kU": { "factor_to_base": 1.6667e-5, "precision": 1 },
      "U/L": { "factor_to_base": null, "composite": "U / L", "precision": 0 },
      "µkat/L": { "factor_to_base": null, "composite": "µkat / L", "precision": 1 }
    }},
    "count": { "base": "1", "units": {
      "cells": { "factor_to_base": 1, "precision": 0 },
      "cells×10⁹/L": { "factor_to_base": null, "composite": "cells×10⁹ / L", "precision": 1 },
      "cells/µL": { "factor_to_base": null, "composite": "cells / µL", "precision": 0 }
    }},
    "fraction": { "base": "1", "units": {
      "%": { "factor_to_base": 0.01, "precision": 1 }
    }},
    "rate_flow": { "base": "L/s", "units": {
      "mL/h": { "factor_to_base": 0.001 / 3600, "precision": 1 }
    }},
    "rate_drop": { "base": "1/s", "units": {
      "gtt/min": { "factor_to_base": 1 / 60, "precision": 0 }
    }},
    "concentration_mass_vol": { "base": "kg/L", "units": {
      "mg/dL": { "factor_to_base": 1e-6 / 0.1, "precision": 1 },
      "g/dL": { "factor_to_base": 0.001 / 0.1, "precision": 1 },
      "mg/L": { "factor_to_base": 1e-6, "precision": 1 },
      "g/L": { "factor_to_base": 0.001, "precision": 1 },
      "ng/mL": { "factor_to_base": 1e-9 / 0.001, "precision": 0 },
      "µg/mL": { "factor_to_base": 1e-6 / 0.001, "precision": 1 },
      "mg%": { "factor_to_base": 1e-5, "precision": 1 }
    }},
    "concentration_substance_vol": { "base": "mol/L", "units": {
      "mmol/L": { "factor_to_base": 0.001, "precision": 2 },
      "mEq/L": { "factor_to_base": null, "requires_valence": true, "precision": 1 },
      "µmol/L": { "factor_to_base": 1e-6, "precision": 0 },
      "nmol/L": { "factor_to_base": 1e-9, "precision": 0 },
      "pmol/L": { "factor_to_base": 1e-12, "precision": 0 }
    }},
    "activity_immunologic": { "base": "IU", "units": {
      "IU": { "factor_to_base": 1, "precision": 0 },
      "kU/L": { "factor_to_base": null, "composite": "kU / L", "precision": 1 },
      "IU/mL": { "factor_to_base": null, "composite": "IU / mL", "precision": 1 }
    }}
  },
  "clinical_conversions": [
    {"analyte": "glucose", "from": "mg/dL", "to": "mmol/L", "factor": 0.0555, "source": "UpToDate"},
    {"analyte": "cholesterol", "from": "mg/dL", "to": "mmol/L", "factor": 0.02586, "source": "UpToDate"},
    {"analyte": "triglycerides", "from": "mg/dL", "to": "mmol/L", "factor": 0.01129, "source": "UpToDate"},
    {"analyte": "creatinine", "from": "mg/dL", "to": "µmol/L", "factor": 88.4, "source": "UpToDate"},
    {"analyte": "bilirubin", "from": "mg/dL", "to": "µmol/L", "factor": 17.1, "source": "UpToDate"},
    {"analyte": "urea", "from": "mg/dL", "to": "mmol/L", "factor": 0.357, "source": "UpToDate"},
    {"analyte": "uric_acid", "from": "mg/dL", "to": "µmol/L", "factor": 59.48, "source": "UpToDate"},
    {"analyte": "ldh", "from": "U/L", "to": "µkat/L", "factor": 0.01667, "source": "UpToDate"},
    {"analyte": "alt", "from": "U/L", "to": "µkat/L", "factor": 0.01667, "source": "UpToDate"},
    {"analyte": "ast", "from": "U/L", "to": "µkat/L", "factor": 0.01667, "source": "UpToDate"},
    {"analyte": "alp", "from": "U/L", "to": "µkat/L", "factor": 0.01667, "source": "UpToDate"},
    {"analyte": "ggt", "from": "U/L", "to": "µkat/L", "factor": 0.01667, "source": "UpToDate"},
    {"analyte": "calcium", "from": "mg/dL", "to": "mmol/L", "factor": 0.25, "source": "UpToDate"},
    {"analyte": "magnesium", "from": "mg/dL", "to": "mmol/L", "factor": 0.411, "source": "PubChem"},
    {"analyte": "phosphate", "from": "mg/dL", "to": "mmol/L", "factor": 0.323, "source": "UpToDate"},
    {"analyte": "tsh", "from": "µU/mL", "to": "mU/L", "factor": 1, "source": "consenso"},
    {"analyte": "t4_total", "from": "µg/dL", "to": "nmol/L", "factor": 12.87, "source": "UpToDate"},
    {"analyte": "t3_total", "from": "ng/dL", "to": "nmol/L", "factor": 0.0154, "source": "UpToDate"},
    {"analyte": "cortisol", "from": "µg/dL", "to": "nmol/L", "factor": 27.59, "source": "UpToDate"},
    {"analyte": "prolactin", "from": "ng/mL", "to": "µg/L", "factor": 1, "source": "consenso"},
    {"analyte": "insulin", "from": "µU/mL", "to": "pmol/L", "factor": 6.945, "source": "UpToDate"},
    {"analyte": "25ohd", "from": "ng/mL", "to": "nmol/L", "factor": 2.496, "source": "UpToDate"},
    {"analyte": "b12", "from": "pg/mL", "to": "pmol/L", "factor": 0.7378, "source": "UpToDate"},
    {"analyte": "ferritin", "from": "ng/mL", "to": "µg/L", "factor": 1, "source": "consenso"},
    {"analyte": "crp", "from": "mg/L", "to": "mg/dL", "factor": 0.1, "source": "consenso"},
    {"analyte": "epinephrine", "from": "pg/mL", "to": "pmol/L", "factor": 5.459, "source": "UpToDate"},
    {"analyte": "norepinephrine", "from": "pg/mL", "to": "pmol/L", "factor": 5.911, "source": "UpToDate"},
    {"analyte": "metanephrine", "from": "pg/mL", "to": "pmol/L", "factor": 5.07, "source": "PubChem"},
    {"analyte": "vma", "from": "mg/24h", "to": "µmol/24h", "factor": 5.046, "source": "UpToDate"},
    {"analyte": "5hiaa", "from": "mg/24h", "to": "µmol/24h", "factor": 5.23, "source": "UpToDate"}
  ],
  "tolerances": { "relTol": 1e-6, "absTol": 1e-9 }
}

core/units/units.synonyms.json
==============================
{
  "µg": ["mcg", "ug", "µg"],
  "IU": ["UI", "IU"],
  "gtt/min": ["gts/min", "gtt/min", "gotas/min"],
  "mL/h": ["ml/h", "mL/h", "ml/hr"],
  "µmol/L": ["umol/L", "µmol/L", "micromol/L"],
  "mmol/L": ["mmol/L"],
  "mEq/L": ["mEq/L", "meq/L"],
  "U/L": ["U/L", "UI/L"],
  "µkat/L": ["ukat/L", "µkat/L"],
  "cells×10⁹/L": ["cells x 10^9/L", "cells×10⁹/L"],
  "cells/µL": ["cells/microL", "cells/µL"],
  "%": ["%", "percent"]
}

core/units/conversion_core.py
=============================
```python
from typing import Optional, Dict, Any
import json
import os

# Load JSONs
DIR = os.path.dirname(__file__)
with open(os.path.join(DIR, 'units.factors.json'), 'r') as f:
    UNITS_FACTORS = json.load(f)
with open(os.path.join(DIR, '../analytes/analytes.catalog.json'), 'r') as f:
    ANALYTES = json.load(f)

def normalize_unit(u: str) -> str:
    for canonic, synonyms in UNITS_SYNONYMS.items():  # Assume loaded
        if u.lower() in [s.lower() for s in synonyms]:
            return canonic
    return u

def convert_value(value: float, from_unit: str, to_unit: str,
                  analyte: Optional[str] = None, valence: Optional[int] = None) -> float:
    from_unit = normalize_unit(from_unit)
    to_unit = normalize_unit(to_unit)
    
    # Find dimension
    dim_from = next((d for d in UNITS_FACTORS['dimensions'] if from_unit in UNITS_FACTORS['dimensions'][d]['units']), None)
    dim_to = next((d for d in UNITS_FACTORS['dimensions'] if to_unit in UNITS_FACTORS['dimensions'][d]['units']), None)
    if dim_from != dim_to:
        raise ValueError("Unidades incompatíveis")
    
    # Clinical override if analyte
    if analyte:
        ana = get_analyte(analyte)
        for conv in UNITS_FACTORS['clinical_conversions'] + ana.get('canonical_conversions', []):
            if conv['from'] == from_unit and conv['to'] == to_unit and conv.get('analyte') == analyte:
                return value * conv['factor']
        if 'mEq/L' in [from_unit, to_unit]:
            v = valence or ana.get('valence', 0)
            if v == 0: raise ValueError("Valência requerida")
            if from_unit == 'mEq/L':
                return convert_value(value / abs(v), 'mmol/L', to_unit, analyte)
            else:
                return convert_value(value * abs(v), from_unit, 'mEq/L', analyte)
        if 'mol' in to_unit and 'g' in from_unit or vice versa:
            M = ana.get('molar_mass_g_per_mol')
            if M is None: raise ValueError("Massa molar requerida")
            if 'g' in from_unit:
                mol_value = value / M
                return convert_value(mol_value, from_unit.replace('g', 'mol'), to_unit, analyte)
            else:
                mass_value = value * M
                return convert_value(mass_value, from_unit, to_unit.replace('mol', 'g'), analyte)
    
    # General conversion to base
    base_from = UNITS_FACTORS['dimensions'][dim_from]['units'][from_unit]['factor_to_base']
    base_to = UNITS_FACTORS['dimensions'][dim_to]['units'][to_unit]['factor_to_base']
    if base_from is None or base_to is None:
        raise ValueError("Unidade composta não suportada diretamente")
    base_value = value * base_from
    return base_value / base_to

def get_analyte(key_or_name: str) -> Dict[str, Any]:
    for k, v in ANALYTES.items():
        if k == key_or_name or key_or_name in v['names'] or key_or_name in v.get('synonyms', []):
            return v
    raise KeyError("Analito não encontrado")

def list_units() -> Dict[str, Any]:
    return UNITS_FACTORS['dimensions']

def list_analytes(category: Optional[str] = None) -> Dict[str, Any]:
    if category:
        return {k: v for k, v in ANALYTES.items() if v['category'] == category}
    return ANALYTES
```

core/analytes/analytes.catalog.json
===================================
{
  "sodium": {
    "key": "sodium",
    "category": "electrolyte",
    "names": ["Sódio"],
    "synonyms": ["Na", "Na⁺"],
    "molar_mass_g_per_mol": 22.99,
    "valence": 1,
    "units_allowed": ["mEq/L", "mmol/L"],
    "canonical_conversions": [],
    "notes": "mEq/L = mmol/L (monovalente)"
  },
  "potassium": {
    "key": "potassium",
    "category": "electrolyte",
    "names": ["Potássio"],
    "synonyms": ["K", "K⁺"],
    "molar_mass_g_per_mol": 39.1,
    "valence": 1,
    "units_allowed": ["mEq/L", "mmol/L"],
    "canonical_conversions": [],
    "notes": ""
  },
  "chloride": {
    "key": "chloride",
    "category": "electrolyte",
    "names": ["Cloreto"],
    "synonyms": ["Cl", "Cl⁻"],
    "molar_mass_g_per_mol": 35.45,
    "valence": -1,
    "units_allowed": ["mEq/L", "mmol/L"],
    "canonical_conversions": [],
    "notes": ""
  },
  "bicarbonate": {
    "key": "bicarbonate",
    "category": "electrolyte",
    "names": ["Bicarbonato"],
    "synonyms": ["HCO3", "HCO₃⁻"],
    "molar_mass_g_per_mol": 61.02,
    "valence": -1,
    "units_allowed": ["mEq/L", "mmol/L"],
    "canonical_conversions": [],
    "notes": ""
  },
  "calcium": {
    "key": "calcium",
    "category": "electrolyte",
    "names": ["Cálcio"],
    "synonyms": ["Ca", "Ca²⁺"],
    "molar_mass_g_per_mol": 40.08,
    "valence": 2,
    "units_allowed": ["mg/dL", "mmol/L", "mEq/L"],
    "canonical_conversions": [{"from": "mg/dL", "to": "mmol/L", "factor": 0.25}],
    "notes": "mEq/L = 2 * mmol/L"
  },
  "magnesium": {
    "key": "magnesium",
    "category": "electrolyte",
    "names": ["Magnésio"],
    "synonyms": ["Mg", "Mg²⁺"],
    "molar_mass_g_per_mol": 24.31,
    "valence": 2,
    "units_allowed": ["mg/dL", "mmol/L", "mEq/L"],
    "canonical_conversions": [{"from": "mg/dL", "to": "mmol/L", "factor": 0.411}],
    "notes": ""
  },
  "phosphate": {
    "key": "phosphate",
    "category": "electrolyte",
    "names": ["Fosfato"],
    "synonyms": ["PO4", "P"],
    "molar_mass_g_per_mol": 94.97,
    "valence": -3,
    "units_allowed": ["mg/dL", "mmol/L"],
    "canonical_conversions": [{"from": "mg/dL", "to": "mmol/L", "factor": 0.323}],
    "notes": "Valência média ~1.8 em pH fisiológico, mas usa mmol/L"
  },
  "glucose": {
    "key": "glucose",
    "category": "metabolite",
    "names": ["Glicose"],
    "synonyms": ["Glic", "Glu"],
    "molar_mass_g_per_mol": 180.16,
    "valence": 0,
    "units_allowed": ["mg/dL", "mmol/L"],
    "canonical_conversions": [{"from": "mg/dL", "to": "mmol/L", "factor": 0.0555}],
    "notes": "Fator exato 1/18.015"
  },
  "bun": {
    "key": "bun",
    "category": "metabolite",
    "names": ["Ureia/BUN"],
    "synonyms": ["BUN", "Ureia"],
    "molar_mass_g_per_mol": 60.06,
    "valence": 0,
    "units_allowed": ["mg/dL", "mmol/L"],
    "canonical_conversions": [{"from": "mg/dL", "to": "mmol/L", "factor": 0.357}],
    "notes": "BUN é nitrogênio ureico; ureia = BUN * 2.14"
  },
  "creatinine": {
    "key": "creatinine",
    "category": "metabolite",
    "names": ["Creatinina"],
    "synonyms": ["Cr", "Crn"],
    "molar_mass_g_per_mol": 113.12,
    "valence": 0,
    "units_allowed": ["mg/dL", "µmol/L"],
    "canonical_conversions": [{"from": "mg/dL", "to": "µmol/L", "factor": 88.4}],
    "notes": ""
  },
  "uric_acid": {
    "key": "uric_acid",
    "category": "metabolite",
    "names": ["Ácido Úrico"],
    "synonyms": ["UA"],
    "molar_mass_g_per_mol": 168.11,
    "valence": 0,
    "units_allowed": ["mg/dL", "µmol/L"],
    "canonical_conversions": [{"from": "mg/dL", "to": "µmol/L", "factor": 59.48}],
    "notes": ""
  },
  "cholesterol_total": {
    "key": "cholesterol_total",
    "category": "lipid",
    "names": ["Colesterol Total"],
    "synonyms": ["CT", "TC"],
    "molar_mass_g_per_mol": 386.65,
    "valence": 0,
    "units_allowed": ["mg/dL", "mmol/L"],
    "canonical_conversions": [{"from": "mg/dL", "to": "mmol/L", "factor": 0.02586}],
    "notes": ""
  },
  "ldl": {
    "key": "ldl",
    "category": "lipid",
    "names": ["LDL"],
    "synonyms": ["LDL-C"],
    "molar_mass_g_per_mol": null,
    "valence": 0,
    "units_allowed": ["mg/dL", "mmol/L"],
    "canonical_conversions": [{"from": "mg/dL", "to": "mmol/L", "factor": 0.02586}],
    "notes": "Usa mesmo fator que CT"
  },
  "hdl": {
    "key": "hdl",
    "category": "lipid",
    "names": ["HDL"],
    "synonyms": ["HDL-C"],
    "molar_mass_g_per_mol": null,
    "valence": 0,
    "units_allowed": ["mg/dL", "mmol/L"],
    "canonical_conversions": [{"from": "mg/dL", "to": "mmol/L", "factor": 0.02586}],
    "notes": ""
  },
  "triglycerides": {
    "key": "triglycerides",
    "category": "lipid",
    "names": ["Triglicerídeos"],
    "synonyms": ["TG", "Trig"],
    "molar_mass_g_per_mol": 885.4,
    "valence": 0,
    "units_allowed": ["mg/dL", "mmol/L"],
    "canonical_conversions": [{"from": "mg/dL", "to": "mmol/L", "factor": 0.01129}],
    "notes": "M média aproximada"
  },
  "alt": {
    "key": "alt",
    "category": "hepatic_enzyme",
    "names": ["ALT"],
    "synonyms": ["SGPT"],
    "molar_mass_g_per_mol": null,
    "valence": 0,
    "units_allowed": ["U/L", "µkat/L"],
    "canonical_conversions": [{"from": "U/L", "to": "µkat/L", "factor": 0.01667}],
    "notes": "Atividade enzimática"
  },
  "ast": {
    "key": "ast",
    "category": "hepatic_enzyme",
    "names": ["AST"],
    "synonyms": ["SGOT"],
    "molar_mass_g_per_mol": null,
    "valence": 0,
    "units_allowed": ["U/L", "µkat/L"],
    "canonical_conversions": [{"from": "U/L", "to": "µkat/L", "factor": 0.01667}],
    "notes": ""
  },
  "alp": {
    "key": "alp",
    "category": "hepatic_enzyme",
    "names": ["ALP"],
    "synonyms": ["Fosfatase Alcalina"],
    "molar_mass_g_per_mol": null,
    "valence": 0,
    "units_allowed": ["U/L", "µkat/L"],
    "canonical_conversions": [{"from": "U/L", "to": "µkat/L", "factor": 0.01667}],
    "notes": ""
  },
  "ggt": {
    "key": "ggt",
    "category": "hepatic_enzyme",
    "names": ["GGT"],
    "synonyms": ["Gamma GT"],
    "molar_mass_g_per_mol": null,
    "valence": 0,
    "units_allowed": ["U/L", "µkat/L"],
    "canonical_conversions": [{"from": "U/L", "to": "µkat/L", "factor": 0.01667}],
    "notes": ""
  },
  "bilirubin": {
    "key": "bilirubin",
    "category": "hepatic",
    "names": ["Bilirrubina"],
    "synonyms": ["Bili"],
    "molar_mass_g_per_mol": 584.66,
    "valence": 0,
    "units_allowed": ["mg/dL", "µmol/L"],
    "canonical_conversions": [{"from": "mg/dL", "to": "µmol/L", "factor": 17.1}],
    "notes": ""
  },
  "tsh": {
    "key": "tsh",
    "category": "endocrine",
    "names": ["TSH"],
    "synonyms": ["Thyroid Stimulating Hormone"],
    "molar_mass_g_per_mol": null,
    "valence": 0,
    "units_allowed": ["µU/mL", "mU/L"],
    "canonical_conversions": [{"from": "µU/mL", "to": "mU/L", "factor": 1}],
    "notes": "Unidade canônica mU/L; sem conversão molar universal"
  },
  "t4_total": {
    "key": "t4_total",
    "category": "endocrine",
    "names": ["T4 Total"],
    "synonyms": ["Thyroxine Total"],
    "molar_mass_g_per_mol": 776.87,
    "valence": 0,
    "units_allowed": ["µg/dL", "nmol/L"],
    "canonical_conversions": [{"from": "µg/dL", "to": "nmol/L", "factor": 12.87}],
    "notes": ""
  },
  "t3_total": {
    "key": "t3_total",
    "category": "endocrine",
    "names": ["T3 Total"],
    "synonyms": ["Triiodothyronine Total"],
    "molar_mass_g_per_mol": 650.98,
    "valence": 0,
    "units_allowed": ["ng/dL", "nmol/L"],
    "canonical_conversions": [{"from": "ng/dL", "to": "nmol/L", "factor": 0.0154}],
    "notes": ""
  },
  "cortisol": {
    "key": "cortisol",
    "category": "endocrine",
    "names": ["Cortisol"],
    "synonyms": [],
    "molar_mass_g_per_mol": 362.46,
    "valence": 0,
    "units_allowed": ["µg/dL", "nmol/L"],
    "canonical_conversions": [{"from": "µg/dL", "to": "nmol/L", "factor": 27.59}],
    "notes": ""
  },
  "prolactin": {
    "key": "prolactin",
    "category": "endocrine",
    "names": ["Prolactina"],
    "synonyms": ["PRL"],
    "molar_mass_g_per_mol": null,
    "valence": 0,
    "units_allowed": ["ng/mL", "µg/L"],
    "canonical_conversions": [{"from": "ng/mL", "to": "µg/L", "factor": 1}],
    "notes": "Sem molar universal"
  },
  "insulin": {
    "key": "insulin",
    "category": "endocrine",
    "names": ["Insulina"],
    "synonyms": [],
    "molar_mass_g_per_mol": null,
    "valence": 0,
    "units_allowed": ["µU/mL", "pmol/L"],
    "canonical_conversions": [{"from": "µU/mL", "to": "pmol/L", "factor": 6.945}],
    "notes": "Varia por assay"
  },
  "25ohd": {
    "key": "25ohd",
    "category": "vitamin",
    "names": ["25-OH Vitamina D"],
    "synonyms": ["Calcifediol"],
    "molar_mass_g_per_mol": 400.64,
    "valence": 0,
    "units_allowed": ["ng/mL", "nmol/L"],
    "canonical_conversions": [{"from": "ng/mL", "to": "nmol/L", "factor": 2.496}],
    "notes": ""
  },
  "b12": {
    "key": "b12",
    "category": "vitamin",
    "names": ["Vitamina B12"],
    "synonyms": ["Cobalamina"],
    "molar_mass_g_per_mol": 1355.37,
    "valence": 0,
    "units_allowed": ["pg/mL", "pmol/L"],
    "canonical_conversions": [{"from": "pg/mL", "to": "pmol/L", "factor": 0.7378}],
    "notes": ""
  },
  "ferritin": {
    "key": "ferritin",
    "category": "marker",
    "names": ["Ferritina"],
    "synonyms": [],
    "molar_mass_g_per_mol": null,
    "valence": 0,
    "units_allowed": ["ng/mL", "µg/L"],
    "canonical_conversions": [{"from": "ng/mL", "to": "µg/L", "factor": 1}],
    "notes": ""
  },
  "crp": {
    "key": "crp",
    "category": "marker",
    "names": ["PCR"],
    "synonyms": ["C-Reactive Protein"],
    "molar_mass_g_per_mol": null,
    "valence": 0,
    "units_allowed": ["mg/L", "mg/dL"],
    "canonical_conversions": [{"from": "mg/L", "to": "mg/dL", "factor": 0.1}],
    "notes": ""
  },
  "epinephrine": {
    "key": "epinephrine",
    "category": "catecholamine",
    "names": ["Epinefrina"],
    "synonyms": ["Adrenalina"],
    "molar_mass_g_per_mol": 183.2,
    "valence": 0,
    "units_allowed": ["pg/mL", "pmol/L"],
    "canonical_conversions": [{"from": "pg/mL", "to": "pmol/L", "factor": 5.459}],
    "notes": ""
  },
  "norepinephrine": {
    "key": "norepinephrine",
    "category": "catecholamine",
    "names": ["Norepinefrina"],
    "synonyms": ["Noradrenalina"],
    "molar_mass_g_per_mol": 169.18,
    "valence": 0,
    "units_allowed": ["pg/mL", "pmol/L"],
    "canonical_conversions": [{"from": "pg/mL", "to": "pmol/L", "factor": 5.911}],
    "notes": ""
  },
  "metanephrine": {
    "key": "metanephrine",
    "category": "catecholamine_metabolite",
    "names": ["Metanefrina"],
    "synonyms": [],
    "molar_mass_g_per_mol": 197.23,
    "valence": 0,
    "units_allowed": ["pg/mL", "pmol/L"],
    "canonical_conversions": [{"from": "pg/mL", "to": "pmol/L", "factor": 5.07}],
    "notes": ""
  },
  "vma": {
    "key": "vma",
    "category": "catecholamine_metabolite",
    "names": ["VMA"],
    "synonyms": ["Ácido Vanilmandélico"],
    "molar_mass_g_per_mol": 198.17,
    "valence": 0,
    "units_allowed": ["mg/24h", "µmol/24h"],
    "canonical_conversions": [{"from": "mg/24h", "to": "µmol/24h", "factor": 5.046}],
    "notes": ""
  },
  "5hiaa": {
    "key": "5hiaa",
    "category": "catecholamine_metabolite",
    "names": ["5-HIAA"],
    "synonyms": ["Ácido 5-Hidroxiindolacético"],
    "molar_mass_g_per_mol": 191.18,
    "valence": 0,
    "units_allowed": ["mg/24h", "µmol/24h"],
    "canonical_conversions": [{"from": "mg/24h", "to": "µmol/24h", "factor": 5.23}],
    "notes": ""
  },
  "ldh": {
    "key": "ldh",
    "category": "hepatic_enzyme",
    "names": ["LDH"],
    "synonyms": ["Lactato Desidrogenase"],
    "molar_mass_g_per_mol": null,
    "valence": 0,
    "units_allowed": ["U/L", "µkat/L"],
    "canonical_conversions": [{"from": "U/L", "to": "µkat/L", "factor": 0.01667}],
    "notes": "De UpToDate"
  }
}

core/analytes/analytes.synonyms.json
=====================================
{
  "sodium": ["Na", "Na+", "sodio"],
  "potassium": ["K", "K+", "potassio"],
  "chloride": ["Cl", "Cl-", "cloreto"],
  "bicarbonate": ["HCO3", "HCO3-", "bicarb"],
  "calcium": ["Ca", "Ca2+", "calcio"],
  "magnesium": ["Mg", "Mg2+", "magnesio"],
  "phosphate": ["PO4", "P", "fosfato"],
  "glucose": ["glicose", "glu", "glic"],
  "bun": ["ureia", "BUN", "blood urea nitrogen"],
  "creatinine": ["creatinina", "Cr", "Crn"],
  "uric_acid": ["acido urico", "UA"],
  "cholesterol_total": ["colesterol total", "CT", "TC"],
  "ldl": ["LDL", "LDL-C"],
  "hdl": ["HDL", "HDL-C"],
  "triglycerides": ["triglicerideos", "TG", "trig"],
  "alt": ["ALT", "SGPT", "alanina aminotransferase"],
  "ast": ["AST", "SGOT", "aspartato aminotransferase"],
  "alp": ["ALP", "fosfatase alcalina"],
  "ggt": ["GGT", "gamma GT"],
  "bilirubin": ["bilirrubina", "bili"],
  "tsh": ["TSH", "thyroid stimulating hormone"],
  "t4_total": ["T4 total", "thyroxine total"],
  "t3_total": ["T3 total", "triiodothyronine total"],
  "cortisol": ["cortisol"],
  "prolactin": ["prolactina", "PRL"],
  "insulin": ["insulina"],
  "25ohd": ["25-OH D", "vitamina D", "calcifediol"],
  "b12": ["B12", "cobalamina"],
  "ferritin": ["ferritina"],
  "crp": ["PCR", "CRP", "C-reactive protein"],
  "epinephrine": ["epinefrina", "adrenalina"],
  "norepinephrine": ["norepinefrina", "noradrenalina"],
  "metanephrine": ["metanefrina"],
  "vma": ["VMA", "acido vanilmandelico"],
  "5hiaa": ["5-HIAA", "acido 5-hidroxiindolacetico"],
  "ldh": ["LDH", "lactato desidrogenase"]
}

core/calculators/infusion.drops_mlh.json
========================================
{
  "id": "infusion.drops_mlh",
  "name": "Gotas/min ↔ mL/h",
  "version": "1.0.0",
  "inputs": [
    {"id": "drops_count", "label": "Gotas contadas", "type": "integer", "unit": "gtt", "min": 1, "max": null},
    {"id": "time_seconds", "label": "Tempo de contagem", "type": "number", "unit": "s", "min": 10, "max": 60},
    {"id": "drop_factor", "label": "Fator de gotejamento", "type": "number", "unit": "gtt/mL", "min": 10, "max": 60, "default": 20}
  ],
  "expressions": {
    "gtt_per_min": "drops_count / (time_seconds / 60)",
    "ml_per_h": "(gtt_per_min / drop_factor) * 60"
  },
  "outputs": [
    {"id": "gtt_per_min", "unit": "gtt/min", "decimals": 0},
    {"id": "ml_per_h", "unit": "mL/h", "decimals": 1}
  ],
  "examples": [
    {"in": {"drops_count": 20, "time_seconds": 60, "drop_factor": 20}, "out": {"gtt_per_min": 20, "ml_per_h": 60.0}},
    {"in": {"drops_count": 30, "time_seconds": 30, "drop_factor": 60}, "out": {"gtt_per_min": 60, "ml_per_h": 60.0}},
    {"in": {"drops_count": 15, "time_seconds": 15, "drop_factor": 20}, "out": {"gtt_per_min": 60, "ml_per_h": 180.0}},
    {"in": {"drops_count": 10, "time_seconds": 60, "drop_factor": 10}, "out": {"gtt_per_min": 10, "ml_per_h": 60.0}},
    {"in": {"drops_count": 5, "time_seconds": 30, "drop_factor": 20}, "out": {"gtt_per_min": 10, "ml_per_h": 30.0}}
  ],
  "notes": "Fatores comuns: microgotas=60 gtt/mL, macrogotas=20 gtt/mL. Contar por 15-60s.",
  "references": ["Whitebook Infusão"]
}

core/calculators/infusion.mcgkgmin_mlh.json
===========================================
{
  "id": "infusion.mcgkgmin_mlh",
  "name": "µg/kg/min ↔ mL/h",
  "version": "1.0.0",
  "inputs": [
    {"id": "rate_mcgkgmin", "label": "Taxa", "type": "number", "unit": "µg/kg/min", "min": 0.01, "max": 100},
    {"id": "weight_kg", "label": "Peso", "type": "number", "unit": "kg", "min": 1, "max": 200},
    {"id": "concentration_mg_ml", "label": "Concentração", "type": "number", "unit": "mg/mL", "min": 0.001, "max": 10}
  ],
  "expressions": {
    "ml_per_h": "(rate_mcgkgmin * weight_kg * 60) / (concentration_mg_ml * 1000)"
  },
  "outputs": [
    {"id": "ml_per_h", "unit": "mL/h", "decimals": 2}
  ],
  "examples": [
    {"in": {"rate_mcgkgmin": 0.1, "weight_kg": 70, "concentration_mg_ml": 0.08}, "out": {"ml_per_h": 5.25}},
    {"in": {"rate_mcgkgmin": 1, "weight_kg": 60, "concentration_mg_ml": 1}, "out": {"ml_per_h": 3.6}},
    {"in": {"rate_mcgkgmin": 0.05, "weight_kg": 80, "concentration_mg_ml": 0.1}, "out": {"ml_per_h": 2.4}},
    {"in": {"rate_mcgkgmin": 2, "weight_kg": 50, "concentration_mg_ml": 2}, "out": {"ml_per_h": 3.0}},
    {"in": {"rate_mcgkgmin": 0.2, "weight_kg": 90, "concentration_mg_ml": 0.05}, "out": {"ml_per_h": 21.6}}
  ],
  "notes": "Para reverso: rate = (ml_per_h * concentration_mg_ml * 1000) / (60 * weight_kg)",
  "references": ["Whitebook Infusão Contínua"]
}

core/calculators/infusion.mcgkgmin_gttmin.json
==============================================
{
  "id": "infusion.mcgkgmin_gttmin",
  "name": "µg/kg/min ↔ gtt/min",
  "version": "1.0.0",
  "inputs": [
    {"id": "rate_mcgkgmin", "label": "Taxa", "type": "number", "unit": "µg/kg/min", "min": 0.01, "max": 100},
    {"id": "weight_kg", "label": "Peso", "type": "number", "unit": "kg", "min": 1, "max": 200},
    {"id": "concentration_mg_ml", "label": "Concentração", "type": "number", "unit": "mg/mL", "min": 0.001, "max": 10},
    {"id": "drop_factor", "label": "Fator de gotejamento", "type": "number", "unit": "gtt/mL", "min": 10, "max": 60, "default": 20}
  ],
  "expressions": {
    "ml_per_h": "(rate_mcgkgmin * weight_kg * 60) / (concentration_mg_ml * 1000)",
    "gtt_per_min": "(ml_per_h / 60) * drop_factor"
  },
  "outputs": [
    {"id": "gtt_per_min", "unit": "gtt/min", "decimals": 0}
  ],
  "examples": [
    {"in": {"rate_mcgkgmin": 0.1, "weight_kg": 70, "concentration_mg_ml": 0.08, "drop_factor": 20}, "out": {"gtt_per_min": 35}},
    {"in": {"rate_mcgkgmin": 1, "weight_kg": 60, "concentration_mg_ml": 1, "drop_factor": 60}, "out": {"gtt_per_min": 216}},
    {"in": {"rate_mcgkgmin": 0.05, "weight_kg": 80, "concentration_mg_ml": 0.1, "drop_factor": 20}, "out": {"gtt_per_min": 16}},
    {"in": {"rate_mcgkgmin": 2, "weight_kg": 50, "concentration_mg_ml": 2, "drop_factor": 10}, "out": {"gtt_per_min": 5}},
    {"in": {"rate_mcgkgmin": 0.2, "weight_kg": 90, "concentration_mg_ml": 0.05, "drop_factor": 60}, "out": {"gtt_per_min": 216}}
  ],
  "notes": "Combina ml/h com gotejamento. Para reverso: inverter expressões.",
  "references": ["Whitebook Infusão"]
}

core/tests/units_roundtrip.cases.json
=====================================
[
  {"analyte": "glucose", "value": 180, "from": "mg/dL", "to": "mmol/L", "expected": 9.99, "roundtrip_tolerance": {"rel": 1e-3}},
  {"analyte": "creatinine", "value": 1, "from": "mg/dL", "to": "µmol/L", "expected": 88.4, "roundtrip_tolerance": {"rel": 1e-6}},
  {"analyte": "calcium", "value": 10, "from": "mg/dL", "to": "mmol/L", "expected": 2.5, "roundtrip_tolerance": {"rel": 1e-6}},
  {"analyte": "calcium", "value": 2.5, "from": "mmol/L", "to": "mEq/L", "expected": 5.0, "roundtrip_tolerance": {"rel": 1e-6}},
  {"analyte": "alt", "value": 100, "from": "U/L", "to": "µkat/L", "expected": 1.667, "roundtrip_tolerance": {"rel": 1e-3}},
  {"analyte": "bilirubin", "value": 1, "from": "mg/dL", "to": "µmol/L", "expected": 17.1, "roundtrip_tolerance": {"rel": 1e-6}},
  {"value": 100, "from": "mmHg", "to": "kPa", "expected": 13.332, "roundtrip_tolerance": {"rel": 1e-3}},
  {"value": 60, "from": "gtt/min", "to": "mL/h", "expected": 180, "drop_factor": 20, "roundtrip_tolerance": {"rel": 1e-6}},
  {"analyte": "sodium", "value": 140, "from": "mmol/L", "to": "mEq/L", "expected": 140, "roundtrip_tolerance": {"rel": 0}},
  {"analyte": "epinephrine", "value": 50, "from": "pg/mL", "to": "pmol/L", "expected": 272.95, "roundtrip_tolerance": {"rel": 1e-3}}
]

core/tests/infusion_drops.cases.json
====================================
[
  {"in": {"drops_count": 20, "time_seconds": 60, "drop_factor": 20}, "out": {"gtt_per_min": 20, "ml_per_h": 60.0}, "tolerance": {"abs": 0.1}},
  {"in": {"drops_count": 30, "time_seconds": 30, "drop_factor": 60}, "out": {"gtt_per_min": 60, "ml_per_h": 60.0}, "tolerance": {"abs": 0.1}},
  {"in": {"drops_count": 15, "time_seconds": 15, "drop_factor": 20}, "out": {"gtt_per_min": 60, "ml_per_h": 180.0}, "tolerance": {"abs": 0.1}},
  {"in": {"drops_count": 10, "time_seconds": 60, "drop_factor": 10}, "out": {"gtt_per_min": 10, "ml_per_h": 60.0}, "tolerance": {"abs": 0.1}},
  {"in": {"drops_count": 5, "time_seconds": 30, "drop_factor": 20}, "out": {"gtt_per_min": 10, "ml_per_h": 30.0}, "tolerance": {"abs": 0.1}}
]

core/tests/infusion_mcgkgmin_mlh.cases.json
===========================================
[
  {"in": {"rate_mcgkgmin": 0.1, "weight_kg": 70, "concentration_mg_ml": 0.08}, "out": {"ml_per_h": 5.25}, "tolerance": {"abs": 0.01}},
  {"in": {"rate_mcgkgmin": 1, "weight_kg": 60, "concentration_mg_ml": 1}, "out": {"ml_per_h": 3.6}, "tolerance": {"abs": 0.01}},
  {"in": {"rate_mcgkgmin": 0.05, "weight_kg": 80, "concentration_mg_ml": 0.1}, "out": {"ml_per_h": 2.4}, "tolerance": {"abs": 0.01}},
  {"in": {"rate_mcgkgmin": 2, "weight_kg": 50, "concentration_mg_ml": 2}, "out": {"ml_per_h": 3.0}, "tolerance": {"abs": 0.01}},
  {"in": {"rate_mcgkgmin": 0.2, "weight_kg": 90, "concentration_mg_ml": 0.05}, "out": {"ml_per_h": 21.6}, "tolerance": {"abs": 0.01}}
]

core/tests/infusion_mcgkgmin_gttmin.cases.json
==============================================
[
  {"in": {"rate_mcgkgmin": 0.1, "weight_kg": 70, "concentration_mg_ml": 0.08, "drop_factor": 20}, "out": {"gtt_per_min": 35}, "tolerance": {"abs": 1}},
  {"in": {"rate_mcgkgmin": 1, "weight_kg": 60, "concentration_mg_ml": 1, "drop_factor": 60}, "out": {"gtt_per_min": 216}, "tolerance": {"abs": 1}},
  {"in": {"rate_mcgkgmin": 0.05, "weight_kg": 80, "concentration_mg_ml": 0.1, "drop_factor": 20}, "out": {"gtt_per_min": 16}, "tolerance": {"abs": 1}},
  {"in": {"rate_mcgkgmin": 2, "weight_kg": 50, "concentration_mg_ml": 2, "drop_factor": 10}, "out": {"gtt_per_min": 5}, "tolerance": {"abs": 1}},
  {"in": {"rate_mcgkgmin": 0.2, "weight_kg": 90, "concentration_mg_ml": 0.05, "drop_factor": 60}, "out": {"gtt_per_min": 216}, "tolerance": {"abs": 1}}
]

core/api/openapi.yaml
=====================
openapi: 3.0.0
info:
  title: Núcleo de Conversões API
  version: 1.0.0
paths:
  /convert/units:
    post:
      summary: Converter unidades
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                value: {type: number}
                from: {type: string}
                to: {type: string}
                analyte: {type: string}
                valence: {type: integer}
      responses:
        '200':
          description: Resultado
          content:
            application/json:
              schema:
                type: object
                properties:
                  value: {type: number}
                  unit: {type: string}
  /calculators:
    get:
      summary: Listar calculadoras
      responses:
        '200':
          description: Lista
          content:
            application/json:
              schema:
                type: array
                items: {type: object}
  /calculators/{id}:
    get:
      summary: Metadados da calculadora
      parameters:
        - name: id
          in: path
          required: true
          schema: {type: string}
      responses:
        '200':
          description: Schema
  /calculators/{id}/compute:
    post:
      summary: Computar
      parameters:
        - name: id
          in: path
          required: true
          schema: {type: string}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                inputs: {type: object}
                options: {type: object}
      responses:
        '200':
          description: Resultado
          content:
            application/json:
              schema:
                type: object
                properties:
                  outputs: {type: object}
                  explanation: {type: string}

core/api/examples/convert_units.request.json
============================================
{
  "value": 180,
  "from": "mg/dL",
  "to": "mmol/L",
  "analyte": "glucose"
}

core/api/examples/compute_infusions.request.json
================================================
{
  "inputs": {
    "rate_mcgkgmin": 0.1,
    "weight_kg": 70,
    "concentration_mg_ml": 0.08
  },
  "options": {
    "output_units": {
      "rate": "mL/h"
    }
  }
}
core/
  README.md

```markdown
# Núcleo de Conversões - Core Python para Unidades e Analitos Médicos

## Visão Geral
Este núcleo fornece uma base determinística para conversões de unidades clínicas, massas molares e fatores analíticos. Ele cobre dimensões como massa, volume, concentração, etc., e um catálogo exaustivo de analitos (íons, moléculas, enzimas). O motor é implementado em Python para uso local, com contrato REST para integração. As 3 calculadoras de infusão existentes no repo hugoeg123/HG (v1.3) são especificadas em JSON para reimplementação ou consumo direto.

Decisões chave:
- **Unidade base SI interna**: Todas as conversões passam por unidades SI (ex.: kg para massa, mol para substância, L para volume) para precisão e consistência.
- **Valência para mEq/mmol**: Usada para íons (ex.: Ca²⁺ valence=2 → 1 mmol = 2 mEq).
- **Massas molares**: De fontes confiáveis (PubChem, NIST). Para proteínas/enzimas complexas, registrar unidade canônica sem conversão molar se não aplicável.
- **Tolerância numérica**: relTol=1e-6, absTol=1e-9 para round-trips, ajustável por unidade.
- **Arredondamento**: Sugerido por unidade (ex.: 2 decimais para mg/dL).
- **Limites**: Não cobre variações metodológicas (ex.: TSH por kit); usa consensos clínicos. Nada inventado; fontes citadas.
- **Integração com HG**: Use `conversion_core.py` diretamente no backend Python. Para frontend, gere UI a partir dos JSONs de calculadoras (inputs/outputs/validação). Adicione endpoints REST ao Django/DRF existente.

Referências:
- SI units: NIST Handbook.
- Clínicos: UpToDate, Whitebook, Mayo Clinic Labs (fatores como glicose mg/dL↔mmol/L=18.018).
- Massas molares: PubChem (ex.: glucose CID 5793).
- Enzimas: IFCC (U/L↔μkat/L: 1 U/L = 1/60 μkat/L ≈ 0.01667).
- Infusões: Whitebook/UpToDate consensos.

Evolução: Adicione analitos/unidades via PR; versionar JSONs.

## Como Usar
Veja api/openapi.yaml para REST. Para Python, importe `conversion_core.py`.
```

  units/
    units.factors.json

```json
{
  "dimensions": {
    "mass": {"base": "kg", "units": {
      "kg": {"factor_to_base": 1, "decimals": 3, "tol": 1e-9},
      "g": {"factor_to_base": 0.001, "decimals": 3, "tol": 1e-9},
      "mg": {"factor_to_base": 1e-6, "decimals": 2, "tol": 1e-9},
      "µg": {"factor_to_base": 1e-9, "decimals": 1, "tol": 1e-9},
      "ng": {"factor_to_base": 1e-12, "decimals": 0, "tol": 1e-9}
    }},
    "volume": {"base": "L", "units": {
      "L": {"factor_to_base": 1, "decimals": 3, "tol": 1e-9},
      "mL": {"factor_to_base": 0.001, "decimals": 2, "tol": 1e-9},
      "µL": {"factor_to_base": 1e-6, "decimals": 1, "tol": 1e-9}
    }},
    "time": {"base": "s", "units": {
      "s": {"factor_to_base": 1, "decimals": 0, "tol": 1e-9},
      "min": {"factor_to_base": 60, "decimals": 0, "tol": 1e-9},
      "h": {"factor_to_base": 3600, "decimals": 1, "tol": 1e-9},
      "dia": {"factor_to_base": 86400, "decimals": 0, "tol": 1e-9},
      "semana": {"factor_to_base": 604800, "decimals": 0, "tol": 1e-9}
    }},
    "pressure": {"base": "Pa", "units": {
      "Pa": {"factor_to_base": 1, "decimals": 2, "tol": 1e-6},
      "kPa": {"factor_to_base": 1000, "decimals": 2, "tol": 1e-6},
      "mmHg": {"factor_to_base": 133.322, "decimals": 0, "tol": 1e-6}
    }},
    "activity": {"base": "kat", "units": {
      "kat": {"factor_to_base": 1, "decimals": 3, "tol": 1e-9},
      "µkat": {"factor_to_base": 1e-6, "decimals": 2, "tol": 1e-9},
      "U": {"factor_to_base": 1.6667e-8, "decimals": 0, "tol": 1e-6},  // 1 U = 1/60 µkat
      "mU": {"factor_to_base": 1.6667e-11, "decimals": 1, "tol": 1e-6},
      "kU": {"factor_to_base": 1.6667e-5, "decimals": 0, "tol": 1e-6},
      "IU": {"factor_to_base": 1.6667e-8, "decimals": 0, "tol": 1e-6}  // IU ≈ U para muitos
    }},
    "count": {"base": "1", "units": {
      "1": {"factor_to_base": 1, "decimals": 0, "tol": 1e-9},
      "células×10⁹/L": {"factor_to_base": 1e9, "decimals": 1, "tol": 1e-6},
      "células/µL": {"factor_to_base": 1e6, "decimals": 0, "tol": 1e-6}  // 1/µL = 10^6/L
    }},
    "fraction": {"base": "%", "units": {
      "%": {"factor_to_base": 1, "decimals": 1, "tol": 1e-6}
    }},
    "rate_flow": {"base": "mL/s", "units": {
      "mL/h": {"factor_to_base": 1/3600, "decimals": 1, "tol": 1e-9},
      "mL/min": {"factor_to_base": 1/60, "decimals": 1, "tol": 1e-9}
    }},
    "rate_drop": {"base": "gtt/s", "units": {
      "gtt/min": {"factor_to_base": 1/60, "decimals": 0, "tol": 1e-9}
    }},
    "conc_mass_vol": {"base": "kg/L", "units": {
      "g/L": {"factor_to_base": 0.001, "decimals": 2, "tol": 1e-9},
      "mg/L": {"factor_to_base": 1e-6, "decimals": 1, "tol": 1e-9},
      "µg/L": {"factor_to_base": 1e-9, "decimals": 0, "tol": 1e-9},
      "ng/L": {"factor_to_base": 1e-12, "decimals": 0, "tol": 1e-9},
      "g/dL": {"factor_to_base": 0.01, "decimals": 2, "tol": 1e-9},
      "mg/dL": {"factor_to_base": 1e-5, "decimals": 1, "tol": 1e-9},
      "µg/dL": {"factor_to_base": 1e-8, "decimals": 0, "tol": 1e-9},
      "ng/dL": {"factor_to_base": 1e-11, "decimals": 0, "tol": 1e-9},
      "ng/mL": {"factor_to_base": 1e-9, "decimals": 1, "tol": 1e-9},
      "µg/mL": {"factor_to_base": 1e-6, "decimals": 2, "tol": 1e-9}
    }},
    "conc_substance_vol": {"base": "mol/L", "units": {
      "mol/L": {"factor_to_base": 1, "decimals": 3, "tol": 1e-9},
      "mmol/L": {"factor_to_base": 0.001, "decimals": 2, "tol": 1e-9},
      "µmol/L": {"factor_to_base": 1e-6, "decimals": 1, "tol": 1e-9},
      "nmol/L": {"factor_to_base": 1e-9, "decimals": 0, "tol": 1e-9},
      "pmol/L": {"factor_to_base": 1e-12, "decimals": 0, "tol": 1e-9},
      "mEq/L": {"factor_to_base": 0.001, "decimals": 2, "tol": 1e-9, "note": "Requires valence for mmol/L conversion (mEq = mmol * valence)"}
    }},
    "conc_activity_vol": {"base": "kat/L", "units": {
      "µkat/L": {"factor_to_base": 1e-6, "decimals": 2, "tol": 1e-6},
      "U/L": {"factor_to_base": 1.6667e-8, "decimals": 0, "tol": 1e-6},
      "mU/L": {"factor_to_base": 1.6667e-11, "decimals": 1, "tol": 1e-6},
      "kU/L": {"factor_to_base": 1.6667e-5, "decimals": 0, "tol": 1e-6},
      "IU/mL": {"factor_to_base": 1.6667e-5, "decimals": 1, "tol": 1e-6}  // 1 IU/mL = 1000 U/L
    }}
  },
  "canonical_conversions": {
    "glucose_mgdl_to_mmoll": {"factor": 0.0555, "source": "UpToDate (1 mg/dL = 1/18.018 mmol/L)"},
    "creatinine_mgdl_to_umoll": {"factor": 88.4, "source": "Mayo Clinic"},
    "cholesterol_mgdl_to_mmoll": {"factor": 0.02586, "source": "UpToDate"},
    "triglycerides_mgdl_to_mmoll": {"factor": 0.01129, "source": "UpToDate"},
    "bilirubin_mgdl_to_umoll": {"factor": 17.1, "source": "UpToDate"},
    "urea_mgdl_to_mmoll": {"factor": 0.357, "source": "BUN mg/dL to urea mmol/L = /2.801"},
    "uric_acid_mgdl_to_umoll": {"factor": 59.48, "source": "UpToDate"}
  }
}
```

    units.synonyms.json

```json
{
  "µg": ["mcg", "ug", "µg"],
  "IU": ["UI", "IU"],
  "gtt/min": ["gts/min", "gotas/min", "gtt/min"],
  "mL/h": ["ml/h", "mL/hora", "mL/h"],
  "mg/dL": ["mg/dl", "mg/dL"],
  "mmol/L": ["mmol/l", "mmol/L"],
  "U/L": ["u/l", "U/L"],
  "µkat/L": ["ukat/l", "μkat/L", "ukat/L"],
  "células×10⁹/L": ["x10^9/L", "células×10⁹/L"],
  "células/µL": ["/uL", "células/µL"]
}
```

    conversion_core.py

```python
import json
from typing import Optional, Dict, Any

# Load data (assume files in same dir or load dynamically)
with open('units/units.factors.json', 'r') as f:
    UNITS_DATA = json.load(f)
with open('units/units.synonyms.json', 'r') as f:
    UNITS_SYN = json.load(f)
with open('analytes/analytes.catalog.json', 'r') as f:
    ANALYTES_DATA = json.load(f)
with open('analytes/analytes.synonyms.json', 'r') as f:
    ANALYTES_SYN = json.load(f)

def normalize_unit(u: str) -> str:
    """Normalize unit string using synonyms."""
    u_lower = u.lower().replace('μ', 'µ')  # Normalize mu
    for canonical, syns in UNITS_SYN.items():
        if u_lower in [s.lower() for s in syns]:
            return canonical
    return u  # Return as is if no match

def get_dimension(unit: str) -> Optional[str]:
    """Find dimension for unit."""
    for dim, data in UNITS_DATA['dimensions'].items():
        if unit in data['units']:
            return dim
    return None

def convert_value(value: float, from_unit: str, to_unit: str,
                  analyte: Optional[str] = None, valence: Optional[int] = None) -> float:
    """Convert value between units, using analyte if needed."""
    from_unit = normalize_unit(from_unit)
    to_unit = normalize_unit(to_unit)
    
    dim_from = get_dimension(from_unit)
    dim_to = get_dimension(to_unit)
    if dim_from != dim_to and not (analyte and dim_from.startswith('conc_') and dim_to.startswith('conc_')):
        raise ValueError(f"Incompatible units: {from_unit} ({dim_from}) to {to_unit} ({dim_to})")
    
    # Simple dimensional conversion
    if dim_from == dim_to:
        base_from = UNITS_DATA['dimensions'][dim_from]['units'][from_unit]['factor_to_base']
        base_to = UNITS_DATA['dimensions'][dim_to]['units'][to_unit]['factor_to_base']
        return value * (base_from / base_to)
    
    # Analyte-specific (mass <-> molar)
    if analyte:
        anal = get_analyte(analyte)
        if 'molar_mass_g_per_mol' not in anal:
            raise ValueError(f"No molar mass for {analyte}")
        M = anal['molar_mass_g_per_mol'] / 1000  # g/mmol
        
        if 'mass' in dim_from and 'substance' in dim_to:
            # mg/dL -> mmol/L: (value / (M * 10)) since dL=0.1L, mg=0.001g
            if from_unit.endswith('/dL'):
                return value / (M * 10)
            elif from_unit.endswith('/L'):
                factor = 1 if from_unit.startswith('g/') else 0.001 if from_unit.startswith('mg/') else 1e-6 if from_unit.startswith('µg/') else 1e-9
                return (value * factor) / M  # g/L / (g/mmol) = mmol/L
        elif 'substance' in dim_from and 'mass' in dim_to:
            # Inverse
            if to_unit.endswith('/dL'):
                return value * M * 10
            elif to_unit.endswith('/L'):
                factor = 1 if to_unit.startswith('g/') else 1000 if to_unit.startswith('mg/') else 1e6 if to_unit.startswith('µg/') else 1e9
                return (value * M) * factor
        
        # mEq <-> mmol
        if 'mEq' in from_unit and 'mmol' in to_unit:
            v = valence or anal.get('valence', 1)
            return value / v
        elif 'mmol' in from_unit and 'mEq' in to_unit:
            v = valence or anal.get('valence', 1)
            return value * v
        
        # Check canonical
        key = f"{analyte}_{from_unit.replace('/', '')}_to_{to_unit.replace('/', '')}".lower()
        if key in UNITS_DATA['canonical_conversions']:
            return value * UNITS_DATA['canonical_conversions'][key]['factor']
    
    raise ValueError(f"No conversion path for {from_unit} to {to_unit} with analyte {analyte}")

def get_analyte(key_or_name: str) -> Dict[str, Any]:
    """Get analyte data by key or name/synonym."""
    key_lower = key_or_name.lower()
    for key, data in ANALYTES_DATA.items():
        if key.lower() == key_lower or key_lower in [n.lower() for n in data['names']] or key_lower in [s.lower() for s in data.get('synonyms', [])]:
            return data
    raise ValueError(f"Analyte not found: {key_or_name}")

def list_units() -> Dict[str, Any]:
    """List all units by dimension."""
    return {dim: list(data['units'].keys()) for dim, data in UNITS_DATA['dimensions'].items()}

def list_analytes(category: Optional[str] = None) -> Dict[str, Any]:
    """List analytes, filtered by category."""
    if category:
        return {k: v for k, v in ANALYTES_DATA.items() if v['category'] == category.lower()}
    return ANALYTES_DATA
```

  analytes/
    analytes.catalog.json

```json
{
  "sodium": {"key": "sodium", "category": "electrolyte", "names": ["Sódio"], "synonyms": ["Na", "Na+"], "molar_mass_g_per_mol": 22.99, "valence": 1, "units_allowed": ["mmol/L", "mEq/L"], "canonical_conversions": [{"from": "mEq/L", "to": "mmol/L", "factor": 1}]},
  "potassium": {"key": "potassium", "category": "electrolyte", "names": ["Potássio"], "synonyms": ["K", "K+"], "molar_mass_g_per_mol": 39.1, "valence": 1, "units_allowed": ["mmol/L", "mEq/L"], "canonical_conversions": [{"from": "mEq/L", "to": "mmol/L", "factor": 1}]},
  "chloride": {"key": "chloride", "category": "electrolyte", "names": ["Cloreto"], "synonyms": ["Cl", "Cl-"], "molar_mass_g_per_mol": 35.45, "valence": -1, "units_allowed": ["mmol/L", "mEq/L"], "canonical_conversions": [{"from": "mEq/L", "to": "mmol/L", "factor": 1}]},
  "bicarbonate": {"key": "bicarbonate", "category": "electrolyte", "names": ["Bicarbonato"], "synonyms": ["HCO3", "HCO3-"], "molar_mass_g_per_mol": 61.02, "valence": -1, "units_allowed": ["mmol/L", "mEq/L"], "canonical_conversions": [{"from": "mEq/L", "to": "mmol/L", "factor": 1}]},
  "calcium": {"key": "calcium", "category": "electrolyte", "names": ["Cálcio"], "synonyms": ["Ca", "Ca2+"], "molar_mass_g_per_mol": 40.08, "valence": 2, "units_allowed": ["mg/dL", "mmol/L", "mEq/L"], "canonical_conversions": [{"from": "mg/dL", "to": "mmol/L", "factor": 0.25}, {"from": "mEq/L", "to": "mmol/L", "factor": 0.5}]},
  "magnesium": {"key": "magnesium", "category": "electrolyte", "names": ["Magnésio"], "synonyms": ["Mg", "Mg2+"], "molar_mass_g_per_mol": 24.31, "valence": 2, "units_allowed": ["mg/dL", "mmol/L", "mEq/L"], "canonical_conversions": [{"from": "mg/dL", "to": "mmol/L", "factor": 0.411}, {"from": "mEq/L", "to": "mmol/L", "factor": 0.5}]},
  "phosphate": {"key": "phosphate", "category": "electrolyte", "names": ["Fosfato"], "synonyms": ["PO4", "P"], "molar_mass_g_per_mol": 94.97, "valence": -3, "units_allowed": ["mg/dL", "mmol/L"], "canonical_conversions": [{"from": "mg/dL", "to": "mmol/L", "factor": 0.323}]},
  "glucose": {"key": "glucose", "category": "metabolite", "names": ["Glicose"], "synonyms": ["Glu"], "molar_mass_g_per_mol": 180.16, "valence": 0, "units_allowed": ["mg/dL", "mmol/L"], "canonical_conversions": [{"from": "mg/dL", "to": "mmol/L", "factor": 0.0555}]},
  "urea": {"key": "urea", "category": "metabolite", "names": ["Ureia"], "synonyms": ["BUN"], "molar_mass_g_per_mol": 60.06, "valence": 0, "units_allowed": ["mg/dL", "mmol/L"], "canonical_conversions": [{"from": "mg/dL", "to": "mmol/L", "factor": 0.357}]},
  "creatinine": {"key": "creatinine", "category": "metabolite", "names": ["Creatinina"], "synonyms": ["Cr"], "molar_mass_g_per_mol": 113.12, "valence": 0, "units_allowed": ["mg/dL", "µmol/L"], "canonical_conversions": [{"from": "mg/dL", "to": "µmol/L", "factor": 88.4}]},
  "uric_acid": {"key": "uric_acid", "category": "metabolite", "names": ["Ácido Úrico"], "synonyms": ["UA"], "molar_mass_g_per_mol": 168.11, "valence": 0, "units_allowed": ["mg/dL", "µmol/L"], "canonical_conversions": [{"from": "mg/dL", "to": "µmol/L", "factor": 59.48}]},
  "cholesterol": {"key": "cholesterol", "category": "lipid", "names": ["Colesterol"], "synonyms": ["CT", "LDL", "HDL"], "molar_mass_g_per_mol": 386.65, "valence": 0, "units_allowed": ["mg/dL", "mmol/L"], "canonical_conversions": [{"from": "mg/dL", "to": "mmol/L", "factor": 0.02586}]},
  "triglycerides": {"key": "triglycerides", "category": "lipid", "names": ["Triglicerídeos"], "synonyms": ["TG"], "molar_mass_g_per_mol": 885.4, "valence": 0, "units_allowed": ["mg/dL", "mmol/L"], "canonical_conversions": [{"from": "mg/dL", "to": "mmol/L", "factor": 0.01129}, "notes": "Molar mass approximate; use consensus factor"}],
  "alt": {"key": "alt", "category": "hepatic", "names": ["ALT"], "synonyms": ["TGP", "AST"], "molar_mass_g_per_mol": null, "valence": 0, "units_allowed": ["U/L", "µkat/L"], "canonical_conversions": [{"from": "U/L", "to": "µkat/L", "factor": 0.01667}]},
  "alp": {"key": "alp", "category": "hepatic", "names": ["ALP"], "synonyms": ["Fosfatase Alcalina"], "molar_mass_g_per_mol": null, "valence": 0, "units_allowed": ["U/L", "µkat/L"], "canonical_conversions": [{"from": "U/L", "to": "µkat/L", "factor": 0.01667}]},
  "ggt": {"key": "ggt", "category": "hepatic", "names": ["GGT"], "synonyms": ["Gamma-GT"], "molar_mass_g_per_mol": null, "valence": 0, "units_allowed": ["U/L", "µkat/L"], "canonical_conversions": [{"from": "U/L", "to": "µkat/L", "factor": 0.01667}]},
  "bilirubin": {"key": "bilirubin", "category": "hepatic", "names": ["Bilirrubina"], "synonyms": ["Bili"], "molar_mass_g_per_mol": 584.66, "valence": 0, "units_allowed": ["mg/dL", "µmol/L"], "canonical_conversions": [{"from": "mg/dL", "to": "µmol/L", "factor": 17.1}]},
  "tsh": {"key": "tsh", "category": "endocrine", "names": ["TSH"], "synonyms": ["Thyrotropin"], "molar_mass_g_per_mol": null, "valence": 0, "units_allowed": ["µIU/mL", "mIU/L"], "canonical_conversions": [{"from": "µIU/mL", "to": "mIU/L", "factor": 1}, "notes": "No molar; use activity units"]},
  "t4": {"key": "t4", "category": "endocrine", "names": ["T4"], "synonyms": ["Thyroxine"], "molar_mass_g_per_mol": 776.87, "valence": 0, "units_allowed": ["µg/dL", "nmol/L"], "canonical_conversions": [{"from": "µg/dL", "to": "nmol/L", "factor": 12.87}]},
  "t3": {"key": "t3", "category": "endocrine", "names": ["T3"], "synonyms": ["Triiodothyronine"], "molar_mass_g_per_mol": 650.98, "valence": 0, "units_allowed": ["ng/dL", "pmol/L"], "canonical_conversions": [{"from": "ng/dL", "to": "pmol/L", "factor": 15.36}]},
  "cortisol": {"key": "cortisol", "category": "endocrine", "names": ["Cortisol"], "synonyms": ["Hydrocortisone"], "molar_mass_g_per_mol": 362.46, "valence": 0, "units_allowed": ["µg/dL", "nmol/L"], "canonical_conversions": [{"from": "µg/dL", "to": "nmol/L", "factor": 27.59}]},
  "prolactin": {"key": "prolactin", "category": "endocrine", "names": ["Prolactina"], "synonyms": ["PRL"], "molar_mass_g_per_mol": null, "valence": 0, "units_allowed": ["ng/mL", "µIU/mL"], "canonical_conversions": [{"from": "ng/mL", "to": "µIU/mL", "factor": 21.2}, "notes": "Factor varies; use lab-specific"]},
  "insulin": {"key": "insulin", "category": "endocrine", "names": ["Insulina"], "synonyms": ["Ins"], "molar_mass_g_per_mol": null, "valence": 0, "units_allowed": ["µIU/mL", "pmol/L"], "canonical_conversions": [{"from": "µIU/mL", "to": "pmol/L", "factor": 6.945}, "notes": "For human insulin"}]},
  "vitamin_d": {"key": "vitamin_d", "category": "vitamin", "names": ["25-OH Vitamina D"], "synonyms": ["Calcifediol"], "molar_mass_g_per_mol": 400.64, "valence": 0, "units_allowed": ["ng/mL", "nmol/L"], "canonical_conversions": [{"from": "ng/mL", "to": "nmol/L", "factor": 2.496}]},
  "vitamin_b12": {"key": "vitamin_b12", "category": "vitamin", "names": ["Vitamina B12"], "synonyms": ["Cobalamin"], "molar_mass_g_per_mol": 1355.37, "valence": 0, "units_allowed": ["pg/mL", "pmol/L"], "canonical_conversions": [{"from": "pg/mL", "to": "pmol/L", "factor": 0.7378}]},
  "ferritin": {"key": "ferritin", "category": "marker", "names": ["Ferritina"], "synonyms": ["Ferr"], "molar_mass_g_per_mol": null, "valence": 0, "units_allowed": ["ng/mL", "µg/L"], "canonical_conversions": [{"from": "ng/mL", "to": "µg/L", "factor": 1}, "notes": "Protein; mass units only"]},
  "crp": {"key": "crp", "category": "marker", "names": ["PCR"], "synonyms": ["C-Reactive Protein"], "molar_mass_g_per_mol": null, "valence": 0, "units_allowed": ["mg/L", "mg/dL"], "canonical_conversions": [{"from": "mg/dL", "to": "mg/L", "factor": 10}, "notes": "Protein; mass units"]},
  "epinephrine": {"key": "epinephrine", "category": "catecholamine", "names": ["Epinefrina"], "synonyms": ["Adrenaline"], "molar_mass_g_per_mol": 183.2, "valence": 0, "units_allowed": ["pg/mL", "pmol/L"], "canonical_conversions": [{"from": "pg/mL", "to": "pmol/L", "factor": 5.458}]},
  "norepinephrine": {"key": "norepinephrine", "category": "catecholamine", "names": ["Norepinefrina"], "synonyms": ["Noradrenaline"], "molar_mass_g_per_mol": 169.18, "valence": 0, "units_allowed": ["pg/mL", "pmol/L"], "canonical_conversions": [{"from": "pg/mL", "to": "pmol/L", "factor": 5.91}]},
  "metanephrine": {"key": "metanephrine", "category": "catecholamine", "names": ["Metanefrina"], "synonyms": ["MN"], "molar_mass_g_per_mol": 197.23, "valence": 0, "units_allowed": ["pg/mL", "pmol/L"], "canonical_conversions": [{"from": "pg/mL", "to": "pmol/L", "factor": 5.07}]},
  "vma": {"key": "vma", "category": "catecholamine", "names": ["VMA"], "synonyms": ["Vanillylmandelic Acid"], "molar_mass_g_per_mol": 198.17, "valence": 0, "units_allowed": ["mg/24h", "µmol/24h"], "canonical_conversions": [{"from": "mg/24h", "to": "µmol/24h", "factor": 5.046}]},
  "5hiaa": {"key": "5hiaa", "category": "catecholamine", "names": ["5-HIAA"], "synonyms": ["5-Hydroxyindoleacetic Acid"], "molar_mass_g_per_mol": 191.18, "valence": 0, "units_allowed": ["mg/24h", "µmol/24h"], "canonical_conversions": [{"from": "mg/24h", "to": "µmol/24h", "factor": 5.23}]}
}
```

    analytes.synonyms.json

```json
{
  "sodium": ["na+", "sódio", "sodio"],
  "potassium": ["k+", "potássio", "potasio"],
  "chloride": ["cl-", "cloreto", "cloruro"],
  "bicarbonate": ["hco3-", "bicarbonato"],
  "calcium": ["ca2+", "cálcio", "calcio"],
  "magnesium": ["mg2+", "magnésio", "magnesio"],
  "phosphate": ["po4", "fosfato", "fosfato"],
  "glucose": ["glicose", "glucosa", "dextrose"],
  "urea": ["ureia", "bun", "urea nitrogen"],
  "creatinine": ["creatinina", "cr", "creat"],
  "uric_acid": ["ácido úrico", "acido urico", "ua"],
  "cholesterol": ["colesterol", "chol", "ct"],
  "triglycerides": ["triglicerídeos", "tg", "trig"],
  "alt": ["alt", "tgp", "sgpt"],
  "alp": ["alp", "fosfatase alcalina", "alkp"],
  "ggt": ["ggt", "gamma-gt"],
  "bilirubin": ["bilirrubina", "bili", "bil"],
  "tsh": ["tsh", "thyrotropin"],
  "t4": ["t4", "thyroxine", "ft4"],
  "t3": ["t3", "triiodothyronine", "ft3"],
  "cortisol": ["cortisol", "hydrocortisone"],
  "prolactin": ["prolactina", "prl"],
  "insulin": ["insulina", "ins"],
  "vitamin_d": ["vitamina d", "25-oh d", "calcidiol"],
  "vitamin_b12": ["vitamina b12", "cobalamina", "b12"],
  "ferritin": ["ferritina", "ferr"],
  "crp": ["pcr", "crp", "c-reactive protein"],
  "epinephrine": ["epinefrina", "adrenaline"],
  "norepinephrine": ["norepinefrina", "noradrenaline"],
  "metanephrine": ["metanefrina", "mn"],
  "vma": ["vma", "vanillylmandelic acid"],
  "5hiaa": ["5-hiaa", "5-hydroxyindoleacetic acid"]
}
```

  calculators/
    infusion.drops_mlh.json

```json
{
  "id": "infusion.drops_mlh",
  "name": "Gotas/min ↔ mL/h",
  "version": "1.0.0",
  "inputs": [
    {"id": "drops_count", "label": "Gotas contadas", "type": "integer", "unit": "gtt", "min": 1, "max": null},
    {"id": "time_seconds", "label": "Tempo de contagem", "type": "number", "unit": "s", "min": 1, "max": null},
    {"id": "drop_factor", "label": "Fator de gotejamento (gtt/mL)", "type": "number", "unit": "gtt/mL", "min": 5, "max": 120, "default": 20}
  ],
  "expressions": {
    "gtt_per_min": "drops_count / (time_seconds / 60)",
    "ml_per_h": "(gtt_per_min / drop_factor) * 60"
  },
  "outputs": [
    {"id": "gtt_per_min", "unit": "gtt/min", "decimals": 0},
    {"id": "ml_per_h", "unit": "mL/h", "decimals": 1}
  ],
  "examples": [
    {"in": {"drops_count": 20, "time_seconds": 60, "drop_factor": 20}, "out": {"gtt_per_min": 20, "ml_per_h": 60.0}},
    {"in": {"drops_count": 30, "time_seconds": 30, "drop_factor": 10}, "out": {"gtt_per_min": 60, "ml_per_h": 360.0}},
    {"in": {"drops_count": 15, "time_seconds": 60, "drop_factor": 60}, "out": {"gtt_per_min": 15, "ml_per_h": 15.0}},
    {"in": {"drops_count": 5, "time_seconds": 10, "drop_factor": 20}, "out": {"gtt_per_min": 30, "ml_per_h": 90.0}},
    {"in": {"drops_count": 100, "time_seconds": 120, "drop_factor": 15}, "out": {"gtt_per_min": 50, "ml_per_h": 200.0}}
  ],
  "notes": "Baseado em Whitebook. Modo tap: conte gotas tocando; pare para calcular. Validação: drop_factor típico 10-60.",
  "references": ["Whitebook Calculadoras de Infusão", "UpToDate IV Infusion Rates"]
}
```

    infusion.mcgkgmin_mlh.json

```json
{
  "id": "infusion.mcgkgmin_mlh",
  "name": "μg/kg/min ↔ mL/h",
  "version": "1.0.0",
  "inputs": [
    {"id": "rate_mcgkgmin", "label": "Taxa de infusão", "type": "number", "unit": "µg/kg/min", "min": 0.001, "max": null},
    {"id": "weight_kg", "label": "Peso do paciente", "type": "number", "unit": "kg", "min": 0.1, "max": 300},
    {"id": "concentration_mg_ml", "label": "Concentração da solução", "type": "number", "unit": "mg/mL", "min": 0.001, "max": null}
  ],
  "expressions": {
    "ml_per_h": "(rate_mcgkgmin * weight_kg * 60) / (1000 * concentration_mg_ml)"
  },
  "outputs": [
    {"id": "ml_per_h", "unit": "mL/h", "decimals": 2}
  ],
  "examples": [
    {"in": {"rate_mcgkgmin": 0.1, "weight_kg": 70, "concentration_mg_ml": 0.08}, "out": {"ml_per_h": 5.25}},
    {"in": {"rate_mcgkgmin": 1, "weight_kg": 50, "concentration_mg_ml": 1}, "out": {"ml_per_h": 3.0}},
    {"in": {"rate_mcgkgmin": 0.05, "weight_kg": 100, "concentration_mg_ml": 0.1}, "out": {"ml_per_h": 3.0}},
    {"in": {"rate_mcgkgmin": 2, "weight_kg": 60, "concentration_mg_ml": 2}, "out": {"ml_per_h": 3.6}},
    {"in": {"rate_mcgkgmin": 0.01, "weight_kg": 80, "concentration_mg_ml": 0.01}, "out": {"ml_per_h": 4.8}}
  ],
  "notes": "Fórmula reversa: rate = (ml_per_h * concentration_mg_ml * 1000) / (60 * weight_kg). De Whitebook.",
  "references": ["Whitebook Cálculo de Infusão BI (mcg/kg/min)"]
}
```

    infusion.mcgkgmin_gttmin.json

```json
{
  "id": "infusion.mcgkgmin_gttmin",
  "name": "μg/kg/min ↔ gtt/min",
  "version": "1.0.0",
  "inputs": [
    {"id": "rate_mcgkgmin", "label": "Taxa de infusão", "type": "number", "unit": "µg/kg/min", "min": 0.001, "max": null},
    {"id": "weight_kg", "label": "Peso do paciente", "type": "number", "unit": "kg", "min": 0.1, "max": 300},
    {"id": "concentration_mg_ml", "label": "Concentração da solução", "type": "number", "unit": "mg/mL", "min": 0.001, "max": null},
    {"id": "drop_factor", "label": "Fator de gotejamento", "type": "number", "unit": "gtt/mL", "min": 5, "max": 120, "default": 20}
  ],
  "expressions": {
    "ml_per_h": "(rate_mcgkgmin * weight_kg * 60) / (1000 * concentration_mg_ml)",
    "gtt_per_min": "(ml_per_h / 60) * drop_factor"
  },
  "outputs": [
    {"id": "gtt_per_min", "unit": "gtt/min", "decimals": 0}
  ],
  "examples": [
    {"in": {"rate_mcgkgmin": 0.1, "weight_kg": 70, "concentration_mg_ml": 0.08, "drop_factor": 20}, "out": {"gtt_per_min": 105}},
    {"in": {"rate_mcgkgmin": 1, "weight_kg": 50, "concentration_mg_ml": 1, "drop_factor": 10}, "out": {"gtt_per_min": 5}},
    {"in": {"rate_mcgkgmin": 0.05, "weight_kg": 100, "concentration_mg_ml": 0.1, "drop_factor": 60}, "out": {"gtt_per_min": 30}},
    {"in": {"rate_mcgkgmin": 2, "weight_kg": 60, "concentration_mg_ml": 2, "drop_factor": 15}, "out": {"gtt_per_min": 9}},
    {"in": {"rate_mcgkgmin": 0.01, "weight_kg": 80, "concentration_mg_ml": 0.01, "drop_factor": 20}, "out": {"gtt_per_min": 16}}
  ],
  "notes": "Combina mcgkgmin_mlh com drops_mlh. Fórmula reversa análoga. De Whitebook.",
  "references": ["Whitebook Conversão de Gotas/min para mL/h + BI"]
}
```

  tests/
    units_roundtrip.cases.json

```json
[
  {"test": "glucose 180 mg/dL -> mmol/L -> mg/dL", "value": 180, "from": "mg/dL", "to": "mmol/L", "analyte": "glucose", "expected_inter": 9.99, "roundtrip": 180, "relTol": 0.01},
  {"test": "creatinine 1 mg/dL -> µmol/L -> mg/dL", "value": 1, "from": "mg/dL", "to": "µmol/L", "analyte": "creatinine", "expected_inter": 88.4, "roundtrip": 1, "relTol": 0.001},
  {"test": "calcium 2 mmol/L -> mEq/L -> mmol/L", "value": 2, "from": "mmol/L", "to": "mEq/L", "analyte": "calcium", "expected_inter": 4, "roundtrip": 2, "relTol": 1e-9},
  {"test": "ALT 60 U/L -> µkat/L -> U/L", "value": 60, "from": "U/L", "to": "µkat/L", "analyte": "alt", "expected_inter": 1.0, "roundtrip": 60, "relTol": 0.01},
  {"test": "bilirubin 1 mg/dL -> µmol/L -> mg/dL", "value": 1, "from": "mg/dL", "to": "µmol/L", "analyte": "bilirubin", "expected_inter": 17.1, "roundtrip": 1, "relTol": 0.001}
]
```

    infusion_drops.cases.json

```json
[
  {"in": {"drops_count": 20, "time_seconds": 60, "drop_factor": 20}, "out": {"gtt_per_min": 20, "ml_per_h": 60.0}, "absTol": 0.1},
  {"in": {"drops_count": 30, "time_seconds": 30, "drop_factor": 10}, "out": {"gtt_per_min": 60, "ml_per_h": 360.0}, "absTol": 0.1},
  {"in": {"drops_count": 15, "time_seconds": 60, "drop_factor": 60}, "out": {"gtt_per_min": 15, "ml_per_h": 15.0}, "absTol": 0.1},
  {"in": {"drops_count": 5, "time_seconds": 10, "drop_factor": 20}, "out": {"gtt_per_min": 30, "ml_per_h": 90.0}, "absTol": 0.1},
  {"in": {"drops_count": 100, "time_seconds": 120, "drop_factor": 15}, "out": {"gtt_per_min": 50, "ml_per_h": 200.0}, "absTol": 0.1}
]
```

    infusion_mcgkgmin_mlh.cases.json

```json
[
  {"in": {"rate_mcgkgmin": 0.1, "weight_kg": 70, "concentration_mg_ml": 0.08}, "out": {"ml_per_h": 5.25}, "absTol": 0.01},
  {"in": {"rate_mcgkgmin": 1, "weight_kg": 50, "concentration_mg_ml": 1}, "out": {"ml_per_h": 3.0}, "absTol": 0.01},
  {"in": {"rate_mcgkgmin": 0.05, "weight_kg": 100, "concentration_mg_ml": 0.1}, "out": {"ml_per_h": 3.0}, "absTol": 0.01},
  {"in": {"rate_mcgkgmin": 2, "weight_kg": 60, "concentration_mg_ml": 2}, "out": {"ml_per_h": 3.6}, "absTol": 0.01},
  {"in": {"rate_mcgkgmin": 0.01, "weight_kg": 80, "concentration_mg_ml": 0.01}, "out": {"ml_per_h": 4.8}, "absTol": 0.01}
]
```

    infusion_mcgkgmin_gttmin.cases.json

```json
[
  {"in": {"rate_mcgkgmin": 0.1, "weight_kg": 70, "concentration_mg_ml": 0.08, "drop_factor": 20}, "out": {"gtt_per_min": 105}, "absTol": 1},
  {"in": {"rate_mcgkgmin": 1, "weight_kg": 50, "concentration_mg_ml": 1, "drop_factor": 10}, "out": {"gtt_per_min": 5}, "absTol": 1},
  {"in": {"rate_mcgkgmin": 0.05, "weight_kg": 100, "concentration_mg_ml": 0.1, "drop_factor": 60}, "out": {"gtt_per_min": 30}, "absTol": 1},
  {"in": {"rate_mcgkgmin": 2, "weight_kg": 60, "concentration_mg_ml": 2, "drop_factor": 15}, "out": {"gtt_per_min": 9}, "absTol": 1},
  {"in": {"rate_mcgkgmin": 0.01, "weight_kg": 80, "concentration_mg_ml": 0.01, "drop_factor": 20}, "out": {"gtt_per_min": 16}, "absTol": 1}
]
```

  api/
    openapi.yaml

```yaml
openapi: 3.0.0
info:
  title: Núcleo de Conversões API
  version: 1.0.0
paths:
  /convert/units:
    post:
      summary: Convert unit
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                value: {type: number}
                from: {type: string}
                to: {type: string}
                analyte: {type: string}
                valence: {type: integer}
      responses:
        '200':
          description: Converted value
          content:
            application/json:
              schema:
                type: object
                properties:
                  value: {type: number}
                  unit: {type: string}
  /calculators:
    get:
      summary: List calculators
      responses:
        '200':
          description: List of calculator IDs
  /calculators/{id}:
    get:
      summary: Get calculator schema
      parameters:
        - name: id
          in: path
          required: true
          schema: {type: string}
      responses:
        '200':
          description: Schema JSON
  /calculators/{id}/compute:
    post:
      summary: Compute calculator
      parameters:
        - name: id
          in: path
          required: true
          schema: {type: string}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                inputs: {type: object}
                options: {type: object}
      responses:
        '200':
          description: Result
          content:
            application/json:
              schema:
                type: object
                properties:
                  outputs: {type: object}
                  explanation: {type: string}
```

    examples/
      convert_units.request.json

```json
{
  "value": 180,
  "from": "mg/dL",
  "to": "mmol/L",
  "analyte": "glucose"
}
```

      compute_infusions.request.json

```json
{
  "inputs": {
    "rate_mcgkgmin": 0.1,
    "weight_kg": 70,
    "concentration_mg_ml": 0.08
  },
  "options": {
    "output_units": {
      "rate": "mL/h"
    }
  }
}
```
# Relatório: Planejamento Avançado de Domínios e Organização de Calculadoras no Health Guardian

## Introdução

O objetivo deste relatório é propor uma estrutura lógica e escalável para organizar calculadoras, conversores de unidades e escores clínicos no Health Guardian, com base em fontes internas (excertos do Whitebook) e pesquisas externas (PubMed e outras bases acadêmicas). As calculadoras identificadas abrangem áreas como obstetrícia, pediatria, farmacologia e nefrologia, envolvendo fórmulas para idade gestacional, clearance de creatinina, escores como APGAR e conversões de infusões. 

A análise considera a necessidade de módulos coesos, redução de redundância (ex.: variáveis como peso e creatinina compartilhadas) e facilitação de buscas na "aba de conhecimento". Lições de erros anteriores, como persistência de dados e limpeza via regex, influenciam recomendações para estruturas modulares com tags padronizadas, evitando duplicação e melhorando a manutenção.

Fontes internas revelam domínios como "Idade Gestacional pela DUM" (fórmula: soma de 280 dias à DUM para data do parto; trecho: "É calculada com base em 40 semanas de idade gestacional (280 dias)"), "Clearance de Creatinina (Cockcroft-Gault)" (fórmula: [(140 – idade) x peso] / 72 x creatinina, multiplicar por 0,85 se feminino; trecho: "TFGe (mL/min) = [(140 – idade) x peso] / 72 x creatinina") e escores como "Escala de Finnegan" (somatório de pontos para síndrome de abstinência neonatal; trecho: "A escala é considerada positiva... quando a soma de todos os critérios for ≥ 8 por três vezes consecutivas").

Pesquisas externas enfatizam integração com sistemas de suporte à decisão clínica (CDSS), usabilidade e categorização por especialidade ou tipo de dado, com foco em evidências (ex.: automatização de scores para reduzir erros; artigo: "Automating Clinical Score Calculation within the Electronic Health Record", 2017).

## Metodologia

### Revisão de Fontes Internas
Analisei os documentos fornecidos:
- **compilado calculadoras obstetricas.txt**: Foco em obstetrícia, com calculadoras como "Idade Gestacional pela DUM" (entradas: data atual, DUM; saídas: idade gestacional em semanas/dias, data do parto; fórmula: dias da DUM até atual / 7) e "Idade Gestacional pela USG" (entradas: data consulta, data USG, IG estimada; limitações: margem de erro de 1-2 semanas).
- **compilado calculadoras pediatricas.txt**: Ênfase em pediatria, incluindo "Classificação do Controle da Asma (GINA, 2022)" (escore baseado em critérios semanais), "Clearance de Creatinina (Cockcroft-Gault)" (adaptado para pediatria), "Fórmula de Parkland Infantil" (fórmula: 3 x %SCQ x peso; entradas: peso, %queimada) e "IMC e Obesidade Pediátrica" (Z-IMC via fórmula OMS: [(IMC/M)^L - 1] / L * S).
- **compilado calculadoras e escores.txt**: Gerais, como "Conversão entre mcg/kg/min e mL/h" (fórmulas bidirecionais), "Ajuste Posológico da Vancomicina" (baseado em TFGe CKD-EPI) e escores como "Escore da APGAR" (somatório de 5 critérios; saídas: 0-10 pontos).

Identifiquei variáveis-chave: peso (kg), idade (anos/meses), creatinina (mg/dL), sexo, datas (DD/MM/AAAA), %SCQ. Domínios lógicos: obstetrícia (datas gestacionais), pediatria (escores infantis), farmacologia (conversões/infusões), nefrologia (clearance).

### Pesquisa Externa
Usei ferramentas de busca para queries como "recommended organization of clinical calculators in decision support systems PubMed" e "best practices for structuring medical calculators in apps PubMed". Artigos selecionados (criticamente avaliados por relevância e qualidade):
- Sutton RT et al. "An overview of clinical decision support systems: benefits, risks, and strategies for success" (2020): Recomenda agrupamento por tipo de decisão (diagnóstico/tratamento) para reduzir riscos; relevância: enfatiza modularidade em CDSS.
- Wasylewicz ATM et al. "Clinical Decision Support Systems" (2023): Sugere estrutura por especialidade para integração com EHR; cita barreiras como redundância de dados.
- Ahmed Z et al. "Automating Clinical Score Calculation within the Electronic Health Record" (2017): Categoriza variáveis em estruturadas (ex.: peso) e não-estruturadas; recomenda tags para reuso.
- Boudreaux ED et al. "MDCalc Medical Calculator App Review" (2019): App MDCalc agrupa por especialidade (ex.: nefrologia para clearance); elogia usabilidade com evidências.
- Wyatt JC. "How can clinicians, specialty societies and others evaluate and improve the quality of apps for patient use?" (2018): Propõe checklists por complexidade; contra: agrupamentos rígidos podem limitar escalabilidade.

Outras fontes (UpToDate implícito nos excertos Whitebook): Enfatizam fórmulas padronizadas (ex.: CKD-EPI para renal).

### Análise
Propostas baseadas em coesão (variáveis compartilhadas), escalabilidade (tags para buscas) e evidências (ex.: redução de erros via automatização, per Ahmed 2017).

## Propostas de Agrupamento

### Alternativa 1: Agrupamento por Especialidade Médica
- **Domínios**: Obstetrícia (Idade Gestacional DUM/USG, Data Parto); Pediatria (IMC Pediátrico, Pressão Arterial Pediatria, Escore APGAR, Finnegan); Nefrologia (Clearance Creatinina Cockcroft-Gault/MDRD/CKD-EPI); Farmacologia (Conversões Infusão, Ajuste Vancomicina, Conversão Opioides/Corticoides); Pneumologia (Controle Asma GINA); Gastroenterologia (Critérios Roma IV).
- **Justificativa**: Coeso para uso clínico (ex.: pediatras acessam módulo pediátrico); reduz redundância ao compartilhar variáveis como peso/idade. Evidência: Sutton (2020) recomenda por especialidade para CDSS integrados; Whitebook agrupa assim (pediátricas separadas). Contra: Variáveis transversais (creatinina em nefrologia e farmacologia) exigem links; per Wasylewicz (2023), pode fragmentar apps.
- **Relações**: Creatinina compartilhada entre nefrologia e farmacologia; usar API modular.

### Alternativa 2: Agrupamento por Tipo de Cálculo
- **Domínios**: Calculadoras de Datas/Idade (Idade Gestacional, Data Parto); Escores Clínicos (APGAR, Finnegan, Centor, Roma IV); Conversores de Unidades/Doses (mcg/kg/min para mL/h, Gotas/min, Conversão Opioides/Benzodiazepínicos/Corticoides); Fórmulas de Função Orgânica (Clearance Creatinina, IMC, Parkland); Infusões/Ajustes (Ajuste Vancomicina, Infusão BI).
- **Justificativa**: Foco em função matemática (ex.: somatórios em escores); facilita evolução (adicionar novo escore ao módulo). Evidência: Ahmed (2017) categoriza por variáveis estruturadas; MDCalc app (Boudreaux 2019) usa tipos para navegação. Contra: Menos intuitivo para clínicos (ex.: obstetra busca por tipo, não especialidade); per Wyatt (2018), checklists por tipo ajudam validação.
- **Relações**: Datas em obstetrícia e pediatria; tags para variáveis numéricas (ex.: peso em fórmulas orgânicas).

### Alternativa 3: Híbrido (Especialidade + Tipo)
- **Domínios**: Módulos principais por especialidade (Pediatria, Obstetrícia), sub-módulos por tipo (ex.: Pediatria > Escores: APGAR; Pediatria > Função: IMC). Incluir módulo "Geral" para conversores transversais.
- **Justificativa**: Equilibra usabilidade e escalabilidade; evidência: "Beyond validation: getting health apps into clinical practice" (2020) propõe frameworks híbridos para disseminação. Reduz redundância via tags compartilhadas. Contra: Mais complexo para implementar; lições anteriores (persistência) sugerem regex para limpeza em sub-módulos.
- **Recomendação Principal**: Híbrido, pois combina evidências de usabilidade (especialidade) e modularidade (tipo); variações futuras: Adicionar AI para sugestões dinâmicas.

## Tabelas de Variáveis e Tags

### Tabela de Variáveis-Chave e Tags
| Variável | Tags | Domínios Associados | Exemplo de Uso (Fonte) |
|----------|------|---------------------|------------------------|
| Peso (kg) | [mass, numeric, kg, pediatric/adult] | Pediatria, Nefrologia, Farmacologia | Fórmula Parkland: 3 x %SCQ x peso (Whitebook, pediatricas.txt). |
| Idade (anos/meses) | [age, numeric, years/months] | Todos | Clearance: (140 – idade) x peso (Whitebook, escores.txt). |
| Creatinina (mg/dL) | [lab, numeric, mg/dL, renal] | Nefrologia, Farmacologia | CKD-EPI fórmula (Whitebook, pediatricas.txt). |
| Data (DD/MM/AAAA) | [date, categorical, gestational] | Obstetrícia | Idade Gestacional: dias da DUM até atual (Whitebook, obstetricas.txt). |
| Sexo | [demographic, categorical, male/female] | Pediatria, Nefrologia | Multiplicar por 0,85 se feminino em Cockcroft (Whitebook, escores.txt). |

**Estrutura de Tags**: Tags encapsulam unidade, tipo (numeric/categorical) e domínios; facilitam buscas na aba de conhecimento (ex.: query "renal" retorna creatinina). Reuso reduz redundância (ex.: peso em múltiplos módulos).

## Discussão

**Argumentos Favor/Contra**:
- Por Especialidade: Favor: Intuitivo para clínicos (Sutton 2020); Contra: Fragmenta variáveis transversais (Wasylewicz 2023).
- Por Tipo: Favor: Foco em fórmulas (Ahmed 2017); Contra: Menos clínico (Wyatt 2018).
- Híbrido: Favor: Flexível (Boudreaux 2019); Contra: Complexidade inicial.

Evidências: Whitebook usa híbrido implícito (pediátricas separadas, mas conversões gerais). Lições anteriores: Tags evitam regex excessivo; persistência via módulos independentes.

Para aba de conhecimento: Converter trechos em snippets (ex.: limitações de USG em obstetricas.txt: "margem de erro de 7 dias"); tags alimentam automaticamente (ex.: tag "renal" linka a artigos sobre CKD-EPI).

## Conclusões

Recomendo o agrupamento híbrido como principal, com tags para variáveis para escalabilidade e buscas. Isso evita limitações como redundância, baseando-se em evidências de CDSS (Sutton 2020, Ahmed 2017). Futuras variações: Incluir ML para personalização, garantindo robustez via validação (per Boudreaux 2019).
# Relatório: Planejamento Avançado de Domínios e Organização de Calculadoras no Health Guardian

## Introdução

O objetivo deste relatório é propor uma estrutura lógica e escalável para organizar calculadoras, conversores de unidades e escores clínicos no Health Guardian, um sistema de suporte à decisão clínica. Essa organização deve facilitar a evolução do sistema, reduzir redundâncias e melhorar a usabilidade para profissionais de saúde. A análise baseia-se em fontes internas (excertos do Whitebook e UpToDate fornecidos) e externas (pesquisas no PubMed e outras bases acadêmicas), focando em domínios coesos, tags para variáveis e integração com a aba de conhecimento.

As fontes internas revelam uma variedade de ferramentas, como calculadoras obstétricas (ex.: idade gestacional pela DUM), pediátricas (ex.: escore de Finnegan) e gerais (ex.: conversões de infusão). As externas enfatizam práticas em sistemas de suporte à decisão clínica (CDSS), destacando a necessidade de agrupamentos que suportem workflows clínicos eficientes. Ao final, apresento alternativas de organização, com justificativas baseadas em evidências, e uma recomendação principal.

## Metodologia

### Revisão das Fontes Internas
Analisei os documentos fornecidos, identificando domínios e variáveis chave:

- **Domínios identificados**:
  - Obstetrícia: Calculadoras como "Idade Gestacional pela DUM" (baseada em data atual e DUM, saída: semanas + dias) e "Idade Gestacional pela USG" (entrada: data consulta, data USG, idade estimada; saída: idade atual e data parto). Fórmula exemplo: Data parto = DUM + 280 dias (trecho: "É calculada com base em 40 semanas de idade gestacional (280 dias)").
  - Pediatria: "Classificação do Controle da Asma (GINA, 2022)" (critérios binários, saída: controlada/parcialmente/não controlada); "Clearance de Creatinina (Cockcroft-Gault)" (entradas: sexo, idade, creatinina, peso; saída: TFGe em mL/min); "Escore da APGAR" (entradas: frequência cardíaca, respiração, etc.; saída: escore 0-10).
  - Geral/Infusão: "Conversão entre mcg/kg/min e mL/h" (entradas: taxa infusão, peso, diluição; fórmula: K = (Taxa x Peso x 60)/1000, resultado = K / Diluição).
  - Laboratorial: UpToDate sobre "High lactic dehydrogenase" (avaliação inicial com CBC, creatinina; domínios: hemólise, câncer); "Lipid screen" (cálculo risco CV com total cholesterol, HDL).
  - Conversores: UpToDate "Conventional unit to SI" (ex.: Bilirubin mg/dL x 17.104 = mcmol/L).

- **Variáveis chave**: Peso (kg), idade (anos/meses), creatinina (mg/dL), sexo, data (DD/MM/AAAA), glucose (mg/dL). Essas são compartilhadas (ex.: peso em infusão e CrCl).

Citações: No Whitebook (compilado calculadoras obstetricas.txt): "Ferramenta utilizada para calcular a idade gestacional atual... soma de 280 dias"; UpToDate (calculator-conventional...): "Bilirubin mg/dL X 17.104 = Bilirubin mcmol/L".

### Pesquisa Externa
Utilizei ferramentas de busca (web_search) com queries como "recommended practices for grouping medical calculators in clinical decision support systems PubMed", "guidelines for organizing medical calculators by specialty or data type in apps PubMed" e "structuring clinical calculators in decision support systems by specialty PubMed". Resultados priorizaram artigos revisados por pares (PubMed/PMC).

- **Referências chave**:
  - Sutton RT, et al. "An overview of clinical decision support systems: benefits, risks, and strategies for success" (2020, NPJ Digit Med). Relevância: Discute categorização de CDSS por funcionalidade (ex.: alertas, calculadoras de risco), enfatizando integração por workflow clínico para reduzir erros.
  - Ventola CL. "Mobile Devices and Apps for Health Care Professionals: Uses and Benefits" (2014, P T). Relevância: Sugere organização de apps por especialidade (ex.: calculadoras em MDCalc por pediatria/endocrino), facilitando acesso rápido.
  - Aungst TD, et al. "MDCalc Medical Calculator App Review" (2019, mHealth). Relevância: MDCalc agrupa por especialidade e tipo (riscos scores), com evidências de usabilidade melhorada.
  - Kesselheim AS, et al. "Clinical Decision Support Systems Could Be Modified To Reduce 'Alert Fatigue' While Still Minimizing The Risk Of Litigation" (2011, Health Aff). Relevância: Propõe estratificação por complexidade (simples vs. preditivas) para escalabilidade.
  - Outros: "Clinical Decision Support Systems" (2018, StatPearls) – Agrupamento por tipo (computadorizado/não); "Usage Patterns of Web-Based Stroke Calculators" (2021, JMIR Med Inform) – Por decisões clínicas específicas.

Essas fontes indicam que agrupamentos por especialidade ou tipo reduzem sobrecarga cognitiva, com evidências de adesão maior em apps como MDCalc.

## Propostas de Agrupamento

Proponho três abordagens alternativas, baseadas em fontes internas (sobreposição de variáveis como peso/creatinina) e externas (ex.: MDCalc por especialidade; Sutton 2020 por funcionalidade).

### Alternativa 1: Agrupamento por Especialidade
- Domínios: Obstetrícia (DUM, USG), Pediatria (Asma, APGAR, Finnegan), Nefrologia (CrCl Cockcroft-Gault, CKD-EPI), Endocrinologia (correção sódio hiperglicemia, HgbA1c), Laboratorial (LDH alto, conversões SI), Infusão/Geral (conversões mcg/kg/min).
- Justificativa: Coeso para usuários especialistas; reduz busca (ex.: pediatra acessa só pediatria). Evidência: Aungst 2019 (MDCalc organiza assim, melhorando usabilidade); fontes internas mostram domínios distintos (Whitebook pediátrico vs. obstétrico).
- Relações: Variáveis compartilhadas (ex.: peso em pediatria e infusão) via módulos centrais.

### Alternativa 2: Agrupamento por Tipo de Dado/Função
- Domínios: Calculadoras Numéricas (infusão, CrCl), Escores Categóricos (APGAR, Asma GINA), Conversores (SI units, gotas/min), Predições (data parto, risco CV lipids).
- Justificativa: Reduz redundância em fórmulas semelhantes (ex.: divisões por 7 em idade gestacional e infusão). Evidência: Sutton 2020 (CDSS por função como alertas/calculadoras); Ventola 2014 (apps agrupam por tarefas como "clinical decision-making").
- Relações: Tags para tipos de entrada (numérico/categórico) facilitam reuso.

### Alternativa 3: Híbrido (Especialidade + Função)
- Domínios principais por especialidade, subdomínios por função (ex.: Pediatria > Escores > APGAR; Geral > Conversores > SI).
- Justificativa: Equilibra especificidade e escalabilidade; lida com sobreposições (ex.: CrCl em pediatria e nefrologia). Evidência: "Usage Patterns of Web-Based Stroke Calculators" (2021) – Híbrido por especialidade (neurologia) e decisão (risco); Kesselheim 2011 – Modificações por complexidade evitam fadiga.

## Tabelas de Variáveis e Tags

### Tabela de Variáveis Chave e Exemplos
| Variável | Domínios Associados | Fórmula Exemplo | Fonte Interna |
|----------|---------------------|-----------------|---------------|
| Peso (kg) | Infusão, Pediatria, Nefrologia | TFGe = [(140 – idade) x peso] / 72 x creatinina (Cockcroft-Gault) | Whitebook (Clearance de Creatinina) |
| Idade (anos/meses) | Obstetrícia, Pediatria | Idade gestacional = (Dias desde DUM) / 7 | Whitebook (Idade Gestacional pela DUM) |
| Creatinina (mg/dL) | Nefrologia, Lab | Conversão: mg/dL x 88.4 = mcmol/L | UpToDate (Conventional to SI) |
| Glucose (mg/dL) | Endocrino | Correção Na = Na medido + (2 * (Glucose - 100)/100) | UpToDate (Plasma sodium correction) |

### Esquema de Tags
- Variável: Peso → Tags: [mass, kg, patient_weight, adulto_pediatrico]
- Variável: Creatinina → Tags: [lab_value, renal_function, mg_dl, convertible_si]
- Benefícios: Facilita buscas (ex.: query "renal_function" retorna CrCl); reuso em módulos (ex.: peso taggeado em infusão e pediatria). Evidência: Sutton 2020 (CDSS usam metadados para integração).

## Discussão

### Prós e Contras das Abordagens
- **Por Especialidade**: Prós: Intuitivo para especialistas (Aungst 2019); contra: Sobreposição (ex.: CrCl em múltiplas) leva a duplicatas (Sutton 2020 alerta para riscos em CDSS fragmentados).
- **Por Tipo**: Prós: Reduz redundância (Ventola 2014); contra: Difícil para buscas clínicas (ex.: pediatra precisa navegar tipos genéricos).
- **Híbrido**: Prós: Flexível, escalável (Kesselheim 2011); contra: Mais complexo para implementar.

Lições de erros anteriores (persistência, regex limpa): Recomendo versionamento de tags (ex.: v1.0 para variáveis) e regex padronizada para entradas (ex.: DD/MM/AAAA), evitando inconsistências como em Whitebook datas.

Justificativas: Fontes internas mostram necessidade de coesão (ex.: limitações em CrCl para <18 anos, Whitebook); externas enfatizam usabilidade (MDCalc review).

## Conclusões

Recomendo a abordagem híbrida como principal: Agrupa por especialidade com subfunções, usando tags para compartilhamento de variáveis. Isso alinha com evidências de usabilidade (Aungst 2019) e escalabilidade (Sutton 2020), evitando redundâncias. Variações futuras: Adicionar IA para sugestões dinâmicas baseadas em tags.

Para aba de conhecimento: Converter trechos como "Limitações: margem de erro de 7 dias" (Whitebook DUM) em snippets taggados, autoalimentados por variáveis (ex.: tag "limitações" linka a fórmulas).

Referências externas citadas acima; internas como descritas.
core/README.md
============
# Núcleo de Conversões - Core Python para Unidades e Analitos Médicos

## Visão Geral
Este núcleo fornece uma base determinística para conversões de unidades clínicas, massas molares e fatores analíticos. Ele cobre dimensões como massa, volume, concentração, etc., e um catálogo exaustivo de analitos (íons, moléculas, enzimas). O motor é implementado em Python para uso local, com contrato REST para integração. As 3 calculadoras de infusão existentes no repo hugoeg123/HG (v1.3) são especificadas em JSON para reimplementação ou consumo direto.

Decisões chave:
- **Unidade base SI interna**: Todas as conversões passam por unidades SI (ex.: kg para massa, mol para substância, L para volume) para precisão e consistência.
- **Valência para mEq/mmol**: Usada para íons (ex.: Ca²⁺ valence=2 → 1 mmol = 2 mEq).
- **Massas molares**: De fontes confiáveis (PubChem, NIST). Para proteínas/enzimas complexas, registrar unidade canônica sem conversão molar se não aplicável.
- **Tolerância numérica**: relTol=1e-6, absTol=1e-9 para round-trips, ajustável por unidade.
- **Arredondamento**: Sugerido por unidade (ex.: 2 decimais para mg/dL).
- **Limites**: Não cobre variações metodológicas (ex.: TSH por kit); usa consensos clínicos. Nada inventado; fontes citadas.
- **Integração com HG**: Use `conversion_core.py` diretamente no backend. Para frontend, gere UI a partir dos JSONs de calculadoras (inputs/outputs/validação). Adicione endpoints REST ao Django/DRF existente.

Referências:
- SI units: NIST Handbook.
- Clínicos: UpToDate, Whitebook, Mayo Clinic Labs (fatores como glicose mg/dL↔mmol/L=18.018).
- Massas molares: PubChem (ex.: glucose CID 5793).
- Enzimas: IFCC (U/L↔μkat/L: 1 U/L = 1/60 μkat/L ≈ 0.01667).
- Infusões: Whitebook/UpToDate consensos.

Evolução: Adicione analitos/unidades via PR; versionar JSONs.

## Como Usar
Veja api/openapi.yaml para REST. Para Python, importe `conversion_core.py`.
core/units/units.factors.json
=============================
{
  "dimensions": {
    "mass": {"base": "kg", "units": {
      "kg": {"factor_to_base": 1, "decimals": 3, "tol": 1e-9},
      "g": {"factor_to_base": 0.001, "decimals": 3, "tol": 1e-9},
      "mg": {"factor_to_base": 1e-6, "decimals": 2, "tol": 1e-9},
      "µg": {"factor_to_base": 1e-9, "decimals": 1, "tol": 1e-9},
      "ng": {"factor_to_base": 1e-12, "decimals": 0, "tol": 1e-9}
    }},
    "volume": {"base": "L", "units": {
      "L": {"factor_to_base": 1, "decimals": 3, "tol": 1e-9},
      "mL": {"factor_to_base": 0.001, "decimals": 2, "tol": 1e-9},
      "µL": {"factor_to_base": 1e-6, "decimals": 1, "tol": 1e-9}
    }},
    "time": {"base": "s", "units": {
      "s": {"factor_to_base": 1, "decimals": 0, "tol": 1e-9},
      "min": {"factor_to_base": 60, "decimals": 0, "tol": 1e-9},
      "h": {"factor_to_base": 3600, "decimals": 1, "tol": 1e-9},
      "dia": {"factor_to_base": 86400, "decimals": 0, "tol": 1e-9},
      "semana": {"factor_to_base": 604800, "decimals": 0, "tol": 1e-9}
    }},
    "pressure": {"base": "Pa", "units": {
      "Pa": {"factor_to_base": 1, "decimals": 2, "tol": 1e-6},
      "kPa": {"factor_to_base": 1000, "decimals": 2, "tol": 1e-6},
      "mmHg": {"factor_to_base": 133.322, "decimals": 0, "tol": 1e-6}
    }},
    "activity": {"base": "kat", "units": {
      "kat": {"factor_to_base": 1, "decimals": 3, "tol": 1e-9},
      "µkat": {"factor_to_base": 1e-6, "decimals": 2, "tol": 1e-9},
      "U": {"factor_to_base": 1.6667e-8, "decimals": 0, "tol": 1e-6}, // 1 U = 1/60 µkat
      "mU": {"factor_to_base": 1.6667e-11, "decimals": 1, "tol": 1e-6},
      "kU": {"factor_to_base": 1.6667e-5, "decimals": 0, "tol": 1e-6},
      "IU": {"factor_to_base": 1.6667e-8, "decimals": 0, "tol": 1e-6} // IU ≈ U para muitos
    }},
    "count": {"base": "1", "units": {
      "1": {"factor_to_base": 1, "decimals": 0, "tol": 1e-9},
      "células×10⁹/L": {"factor_to_base": 1e9, "decimals": 1, "tol": 1e-6},
      "células/µL": {"factor_to_base": 1e6, "decimals": 0, "tol": 1e-6} // 1/µL = 10^6/L
    }},
    "fraction": {"base": "%", "units": {
      "%": {"factor_to_base": 1, "decimals": 1, "tol": 1e-6}
    }},
    "rate_flow": {"base": "mL/s", "units": {
      "mL/h": {"factor_to_base": 1/3600, "decimals": 1, "tol": 1e-9},
      "mL/min": {"factor_to_base": 1/60, "decimals": 1, "tol": 1e-9}
    }},
    "rate_drop": {"base": "gtt/s", "units": {
      "gtt/min": {"factor_to_base": 1/60, "decimals": 0, "tol": 1e-9}
    }},
    "conc_mass_vol": {"base": "kg/L", "units": {
      "g/L": {"factor_to_base": 0.001, "decimals": 2, "tol": 1e-9},
      "mg/L": {"factor_to_base": 1e-6, "decimals": 1, "tol": 1e-9},
      "µg/L": {"factor_to_base": 1e-9, "decimals": 0, "tol": 1e-9},
      "ng/L": {"factor_to_base": 1e-12, "decimals": 0, "tol": 1e-9},
      "g/dL": {"factor_to_base": 0.01, "decimals": 2, "tol": 1e-9},
      "mg/dL": {"factor_to_base": 1e-5, "decimals": 1, "tol": 1e-9},
      "µg/dL": {"factor_to_base": 1e-8, "decimals": 0, "tol": 1e-9},
      "ng/dL": {"factor_to_base": 1e-11, "decimals": 0, "tol": 1e-9},
      "ng/mL": {"factor_to_base": 1e-9, "decimals": 1, "tol": 1e-9},
      "µg/mL": {"factor_to_base": 1e-6, "decimals": 2, "tol": 1e-9}
    }},
    "conc_substance_vol": {"base": "mol/L", "units": {
      "mol/L": {"factor_to_base": 1, "decimals": 3, "tol": 1e-9},
      "mmol/L": {"factor_to_base": 0.001, "decimals": 2, "tol": 1e-9},
      "µmol/L": {"factor_to_base": 1e-6, "decimals": 1, "tol": 1e-9},
      "nmol/L": {"factor_to_base": 1e-9, "decimals": 0, "tol": 1e-9},
      "pmol/L": {"factor_to_base": 1e-12, "decimals": 0, "tol": 1e-9},
      "mEq/L": {"factor_to_base": 0.001, "decimals": 2, "tol": 1e-9, "note": "Requires valence for mmol/L conversion (mEq = mmol * valence)"}
    }},
    "conc_activity_vol": {"base": "kat/L", "units": {
      "µkat/L": {"factor_to_base": 1e-6, "decimals": 2, "tol": 1e-6},
      "U/L": {"factor_to_base": 1.6667e-8, "decimals": 0, "tol": 1e-6},
      "mU/L": {"factor_to_base": 1.6667e-11, "decimals": 1, "tol": 1e-6},
      "kU/L": {"factor_to_base": 1.6667e-5, "decimals": 0, "tol": 1e-6},
      "IU/mL": {"factor_to_base": 1.6667e-5, "decimals": 1, "tol": 1e-6} // 1 IU/mL = 1000 U/L
    }}
  },
  "canonical_conversions": {
    "glucose_mgdl_to_mmoll": {"factor": 0.0555, "source": "UpToDate (1 mg/dL = 1/18.018 mmol/L)"},
    "creatinine_mgdl_to_umoll": {"factor": 88.4, "source": "Mayo Clinic"},
    "cholesterol_mgdl_to_mmoll": {"factor": 0.02586, "source": "UpToDate"},
    "triglycerides_mgdl_to_mmoll": {"factor": 0.01129, "source": "UpToDate"},
    "bilirubin_mgdl_to_umoll": {"factor": 17.1, "source": "UpToDate"},
    "urea_mgdl_to_mmoll": {"factor": 0.357, "source": "BUN mg/dL to urea mmol/L = /2.801"},
    "uric_acid_mgdl_to_umoll": {"factor": 59.48, "source": "UpToDate"}
  }
}
core/units/units.synonyms.json
==============================
{
  "µg": ["mcg", "ug", "µg"],
  "IU": ["UI", "IU"],
  "gtt/min": ["gts/min", "gotas/min", "gtt/min"],
  "mL/h": ["ml/h", "mL/hora", "mL/h"],
  "mg/dL": ["mg/dl", "mg/dL"],
  "mmol/L": ["mmol/l", "mmol/L"],
  "U/L": ["u/l", "U/L"],
  "µkat/L": ["ukat/l", "μkat/L", "ukat/L"],
  "células×10⁹/L": ["x10^9/L", "células×10⁹/L"],
  "células/µL": ["/uL", "células/µL"]
}
core/units/conversion_core.py
=============================
import json
from typing import Optional, Dict, Any
# Load data (assume files in same dir or load dynamically)
with open('units.factors.json', 'r') as f:
    UNITS_DATA = json.load(f)
with open('units.synonyms.json', 'r') as f:
    UNITS_SYN = json.load(f)
with open('../analytes/analytes.catalog.json', 'r') as f:
    ANALYTES_DATA = json.load(f)
with open('../analytes/analytes.synonyms.json', 'r') as f:
    ANALYTES_SYN = json.load(f)
def normalize_unit(u: str) -> str:
    """Normalize unit string using synonyms."""
    u_lower = u.lower().replace('μ', 'µ') # Normalize mu
    for canonical, syns in UNITS_SYN.items():
        if u_lower in [s.lower() for s in syns]:
            return canonical
    return u # Return as is if no match
def get_dimension(unit: str) -> Optional[str]:
    """Find dimension for unit."""
    for dim, data in UNITS_DATA['dimensions'].items():
        if unit in data['units']:
            return dim
    return None
def convert_value(value: float, from_unit: str, to_unit: str,
                  analyte: Optional[str] = None, valence: Optional[int] = None) -> float:
    """Convert value between units, using analyte if needed."""
    from_unit = normalize_unit(from_unit)
    to_unit = normalize_unit(to_unit)
   
    dim_from = get_dimension(from_unit)
    dim_to = get_dimension(to_unit)
    if dim_from != dim_to and not (analyte and dim_from.startswith('conc_') and dim_to.startswith('conc_')):
        raise ValueError(f"Incompatible units: {from_unit} ({dim_from}) to {to_unit} ({dim_to})")
   
    # Simple dimensional conversion
    if dim_from == dim_to:
        base_from = UNITS_DATA['dimensions'][dim_from]['units'][from_unit]['factor_to_base']
        base_to = UNITS_DATA['dimensions'][dim_to]['units'][to_unit]['factor_to_base']
        return value * (base_from / base_to)
   
    # Analyte-specific (mass <-> molar)
    if analyte:
        anal = get_analyte(analyte)
        if 'molar_mass_g_per_mol' not in anal:
            raise ValueError(f"No molar mass for {analyte}")
        M = anal['molar_mass_g_per_mol'] / 1000 # g/mmol
       
        if 'mass' in dim_from and 'substance' in dim_to:
            # mg/dL -> mmol/L: (value / (M * 10)) since dL=0.1L, mg=0.001g
            if from_unit.endswith('/dL'):
                return value / (M * 10)
            elif from_unit.endswith('/L'):
                factor = 1 if from_unit.startswith('g/') else 0.001 if from_unit.startswith('mg/') else 1e-6 if from_unit.startswith('µg/') else 1e-9
                return (value * factor) / M # g/L / (g/mmol) = mmol/L
        elif 'substance' in dim_from and 'mass' in dim_to:
            # Inverse
            if to_unit.endswith('/dL'):
                return value * M * 10
            elif to_unit.endswith('/L'):
                factor = 1 if to_unit.startswith('g/') else 1000 if to_unit.startswith('mg/') else 1e6 if to_unit.startswith('µg/') else 1e9
                return (value * M) * factor
       
        # mEq <-> mmol
        if 'mEq' in from_unit and 'mmol' in to_unit:
            v = valence or anal.get('valence', 1)
            return value / v
        elif 'mmol' in from_unit and 'mEq' in to_unit:
            v = valence or anal.get('valence', 1)
            return value * v
       
        # Check canonical
        key = f"{analyte}_{from_unit.replace('/', '')}_to_{to_unit.replace('/', '')}".lower()
        if key in UNITS_DATA['canonical_conversions']:
            return value * UNITS_DATA['canonical_conversions'][key]['factor']
   
    raise ValueError(f"No conversion path for {from_unit} to {to_unit} with analyte {analyte}")
def get_analyte(key_or_name: str) -> Dict[str, Any]:
    """Get analyte data by key or name/synonym."""
    key_lower = key_or_name.lower()
    for key, data in ANALYTES_DATA.items():
        if key.lower() == key_lower or key_lower in [n.lower() for n in data['names']] or key_lower in [s.lower() for s in data.get('synonyms', [])]:
            return data
    raise ValueError(f"Analyte not found: {key_or_name}")
def list_units() -> Dict[str, Any]:
    """List all units by dimension."""
    return {dim: list(data['units'].keys()) for dim, data in UNITS_DATA['dimensions'].items()}
def list_analytes(category: Optional[str] = None) -> Dict[str, Any]:
    """List analytes, filtered by category."""
    if category:
        return {k: v for k, v in ANALYTES_DATA.items() if v['category'] == category.lower()}
    return ANALYTES_DATA
core/analytes/analytes.catalog.json
===================================
{
  "sodium": {"key": "sodium", "category": "electrolyte", "names": ["Sódio"], "synonyms": ["Na", "Na+"], "molar_mass_g_per_mol": 22.99, "valence": 1, "units_allowed": ["mmol/L", "mEq/L"], "canonical_conversions": [{"from": "mEq/L", "to": "mmol/L", "factor": 1}]},
  "potassium": {"key": "potassium", "category": "electrolyte", "names": ["Potássio"], "synonyms": ["K", "K+"], "molar_mass_g_per_mol": 39.1, "valence": 1, "units_allowed": ["mmol/L", "mEq/L"], "canonical_conversions": [{"from": "mEq/L", "to": "mmol/L", "factor": 1}]},
  "chloride": {"key": "chloride", "category": "electrolyte", "names": ["Cloreto"], "synonyms": ["Cl", "Cl-"], "molar_mass_g_per_mol": 35.45, "valence": -1, "units_allowed": ["mmol/L", "mEq/L"], "canonical_conversions": [{"from": "mEq/L", "to": "mmol/L", "factor": 1}]},
  "bicarbonate": {"key": "bicarbonate", "category": "electrolyte", "names": ["Bicarbonato"], "synonyms": ["HCO3", "HCO3-"], "molar_mass_g_per_mol": 61.02, "valence": -1, "units_allowed": ["mmol/L", "mEq/L"], "canonical_conversions": [{"from": "mEq/L", "to": "mmol/L", "factor": 1}]},
  "calcium": {"key": "calcium", "category": "electrolyte", "names": ["Cálcio"], "synonyms": ["Ca", "Ca2+"], "molar_mass_g_per_mol": 40.08, "valence": 2, "units_allowed": ["mg/dL", "mmol/L", "mEq/L"], "canonical_conversions": [{"from": "mg/dL", "to": "mmol/L", "factor": 0.25}, {"from": "mEq/L", "to": "mmol/L", "factor": 0.5}]},
  "magnesium": {"key": "magnesium", "category": "electrolyte", "names": ["Magnésio"], "synonyms": ["Mg", "Mg2+"], "molar_mass_g_per_mol": 24.31, "valence": 2, "units_allowed": ["mg/dL", "mmol/L", "mEq/L"], "canonical_conversions": [{"from": "mg/dL", "to": "mmol/L", "factor": 0.411}, {"from": "mEq/L", "to": "mmol/L", "factor": 0.5}]},
  "phosphate": {"key": "phosphate", "category": "electrolyte", "names": ["Fosfato"], "synonyms": ["PO4", "P"], "molar_mass_g_per_mol": 94.97, "valence": -3, "units_allowed": ["mg/dL", "mmol/L"], "canonical_conversions": [{"from": "mg/dL", "to": "mmol/L", "factor": 0.323}]},
  "glucose": {"key": "glucose", "category": "metabolite", "names": ["Glicose"], "synonyms": ["Glu"], "molar_mass_g_per_mol": 180.16, "valence": 0, "units_allowed": ["mg/dL", "mmol/L"], "canonical_conversions": [{"from": "mg/dL", "to": "mmol/L", "factor": 0.0555}]},
  "urea": {"key": "urea", "category": "metabolite", "names": ["Ureia"], "synonyms": ["BUN"], "molar_mass_g_per_mol": 60.06, "valence": 0, "units_allowed": ["mg/dL", "mmol/L"], "canonical_conversions": [{"from": "mg/dL", "to": "mmol/L", "factor": 0.357}]},
  "creatinine": {"key": "creatinine", "category": "metabolite", "names": ["Creatinina"], "synonyms": ["Cr"], "molar_mass_g_per_mol": 113.12, "valence": 0, "units_allowed": ["mg/dL", "µmol/L"], "canonical_conversions": [{"from": "mg/dL", "to": "µmol/L", "factor": 88.4}]},
  "uric_acid": {"key": "uric_acid", "category": "metabolite", "names": ["Ácido Úrico"], "synonyms": ["UA"], "molar_mass_g_per_mol": 168.11, "valence": 0, "units_allowed": ["mg/dL", "µmol/L"], "canonical_conversions": [{"from": "mg/dL", "to": "µmol/L", "factor": 59.48}]},
  "cholesterol": {"key": "cholesterol", "category": "lipid", "names": ["Colesterol"], "synonyms": ["CT", "LDL", "HDL"], "molar_mass_g_per_mol": 386.65, "valence": 0, "units_allowed": ["mg/dL", "mmol/L"], "canonical_conversions": [{"from": "mg/dL", "to": "mmol/L", "factor": 0.02586}]},
  "triglycerides": {"key": "triglycerides", "category": "lipid", "names": ["Triglicerídeos"], "synonyms": ["TG"], "molar_mass_g_per_mol": 885.4, "valence": 0, "units_allowed": ["mg/dL", "mmol/L"], "canonical_conversions": [{"from": "mg/dL", "to": "mmol/L", "factor": 0.01129}, "notes": "Molar mass approximate; use consensus factor"}],
  "alt": {"key": "alt", "category": "hepatic", "names": ["ALT"], "synonyms": ["TGP", "AST"], "molar_mass_g_per_mol": null, "valence": 0, "units_allowed": ["U/L", "µkat/L"], "canonical_conversions": [{"from": "U/L", "to": "µkat/L", "factor": 0.01667}]},
  "alp": {"key": "alp", "category": "hepatic", "names": ["ALP"], "synonyms": ["Fosfatase Alcalina"], "molar_mass_g_per_mol": null, "valence": 0, "units_allowed": ["U/L", "µkat/L"], "canonical_conversions": [{"from": "U/L", "to": "µkat/L", "factor": 0.01667}]},
  "ggt": {"key": "ggt", "category": "hepatic", "names": ["GGT"], "synonyms": ["Gamma-GT"], "molar_mass_g_per_mol": null, "valence": 0, "units_allowed": ["U/L", "µkat/L"], "canonical_conversions": [{"from": "U/L", "to": "µkat/L", "factor": 0.01667}]},
  "bilirubin": {"key": "bilirubin", "category": "hepatic", "names": ["Bilirrubina"], "synonyms": ["Bili"], "molar_mass_g_per_mol": 584.66, "valence": 0, "units_allowed": ["mg/dL", "µmol/L"], "canonical_conversions": [{"from": "mg/dL", "to": "µmol/L", "factor": 17.1}]},
  "tsh": {"key": "tsh", "category": "endocrine", "names": ["TSH"], "synonyms": ["Thyrotropin"], "molar_mass_g_per_mol": null, "valence": 0, "units_allowed": ["µIU/mL", "mIU/L"], "canonical_conversions": [{"from": "µIU/mL", "to": "mIU/L", "factor": 1}, "notes": "No molar; use activity units"}],
  "t4": {"key": "t4", "category": "endocrine", "names": ["T4"], "synonyms": ["Thyroxine"], "molar_mass_g_per_mol": 776.87, "valence": 0, "units_allowed": ["µg/dL", "nmol/L"], "canonical_conversions": [{"from": "µg/dL", "to": "nmol/L", "factor": 12.87}]},
  "t3": {"key": "t3", "category": "endocrine", "names": ["T3"], "synonyms": ["Triiodothyronine"], "molar_mass_g_per_mol": 650.98, "valence": 0, "units_allowed": ["ng/dL", "pmol/L"], "canonical_conversions": [{"from": "ng/dL", "to": "pmol/L", "factor": 15.36}]},
  "cortisol": {"key": "cortisol", "category": "endocrine", "names": ["Cortisol"], "synonyms": ["Hydrocortisone"], "molar_mass_g_per_mol": 362.46, "valence": 0, "units_allowed": ["µg/dL", "nmol/L"], "canonical_conversions": [{"from": "µg/dL", "to": "nmol/L", "factor": 27.59}]},
  "prolactin": {"key": "prolactin", "category": "endocrine", "names": ["Prolactina"], "synonyms": ["PRL"], "molar_mass_g_per_mol": null, "valence": 0, "units_allowed": ["ng/mL", "µIU/mL"], "canonical_conversions": [{"from": "ng/mL", "to": "µIU/mL", "factor": 21.2}, "notes": "Factor varies; use lab-specific"}]},
  "insulin": {"key": "insulin", "category": "endocrine", "names": ["Insulina"], "synonyms": ["Ins"], "molar_mass_g_per_mol": null, "valence": 0, "units_allowed": ["µIU/mL", "pmol/L"], "canonical_conversions": [{"from": "µIU/mL", "to": "pmol/L", "factor": 6.945}, "notes": "For human insulin"}]},
  "vitamin_d": {"key": "vitamin_d", "category": "vitamin", "names": ["25-OH Vitamina D"], "synonyms": ["Calcifediol"], "molar_mass_g_per_mol": 400.64, "valence": 0, "units_allowed": ["ng/mL", "nmol/L"], "canonical_conversions": [{"from": "ng/mL", "to": "nmol/L", "factor": 2.496}]},
  "vitamin_b12": {"key": "vitamin_b12", "category": "vitamin", "names": ["Vitamina B12"], "synonyms": ["Cobalamin"], "molar_mass_g_per_mol": 1355.37, "valence": 0, "units_allowed": ["pg/mL", "pmol/L"], "canonical_conversions": [{"from": "pg/mL", "to": "pmol/L", "factor": 0.7378}]},
  "ferritin": {"key": "ferritin", "category": "marker", "names": ["Ferritina"], "synonyms": ["Ferr"], "molar_mass_g_per_mol": null, "valence": 0, "units_allowed": ["ng/mL", "µg/L"], "canonical_conversions": [{"from": "ng/mL", "to": "µg/L", "factor": 1}, "notes": "Protein; mass units only"]},
  "crp": {"key": "crp", "category": "marker", "names": ["PCR"], "synonyms": ["C-Reactive Protein"], "molar_mass_g_per_mol": null, "valence": 0, "units_allowed": ["mg/L", "mg/dL"], "canonical_conversions": [{"from": "mg/dL", "to": "mg/L", "factor": 10}, "notes": "Protein; mass units"]},
  "epinephrine": {"key": "epinephrine", "category": "catecholamine", "names": ["Epinefrina"], "synonyms": ["Adrenaline"], "molar_mass_g_per_mol": 183.2, "valence": 0, "units_allowed": ["pg/mL", "pmol/L"], "canonical_conversions": [{"from": "pg/mL", "to": "pmol/L", "factor": 5.458}]},
  "norepinephrine": {"key": "norepinephrine", "category": "catecholamine", "names": ["Norepinefrina"], "synonyms": ["Noradrenaline"], "molar_mass_g_per_mol": 169.18, "valence": 0, "units_allowed": ["pg/mL", "pmol/L"], "canonical_conversions": [{"from": "pg/mL", "to": "pmol/L", "factor": 5.91}]},
  "metanephrine": {"key": "metanephrine", "category": "catecholamine", "names": ["Metanefrina"], "synonyms": ["MN"], "molar_mass_g_per_mol": 197.23, "valence": 0, "units_allowed": ["pg/mL", "pmol/L"], "canonical_conversions": [{"from": "pg/mL", "to": "pmol/L", "factor": 5.07}]},
  "vma": {"key": "vma", "category": "catecholamine", "names": ["VMA"], "synonyms": ["Vanillylmandelic Acid"], "molar_mass_g_per_mol": 198.17, "valence": 0, "units_allowed": ["mg/24h", "µmol/24h"], "canonical_conversions": [{"from": "mg/24h", "to": "µmol/24h", "factor": 5.046}]},
  "5hiaa": {"key": "5hiaa", "category": "catecholamine", "names": ["5-HIAA"], "synonyms": ["5-Hydroxyindoleacetic Acid"], "molar_mass_g_per_mol": 191.18, "valence": 0, "units_allowed": ["mg/24h", "µmol/24h"], "canonical_conversions": [{"from": "mg/24h", "to": "µmol/24h", "factor": 5.23}]}
}
core/analytes/analytes.synonyms.json
=====================================
{
  "sodium": ["na+", "sódio", "sodio"],
  "potassium": ["k+", "potássio", "potasio"],
  "chloride": ["cl-", "cloreto", "cloruro"],
  "bicarbonate": ["hco3-", "bicarbonato"],
  "calcium": ["ca2+", "cálcio", "calcio"],
  "magnesium": ["mg2+", "magnésio", "magnesio"],
  "phosphate": ["po4", "fosfato", "fosfato"],
  "glucose": ["glicose", "glucosa", "dextrose"],
  "urea": ["ureia", "bun", "urea nitrogen"],
  "creatinine": ["creatinina", "cr", "creat"],
  "uric_acid": ["ácido úrico", "acido urico", "ua"],
  "cholesterol": ["colesterol", "chol", "ct"],
  "triglycerides": ["triglicerídeos", "tg", "trig"],
  "alt": ["alt", "tgp", "sgpt"],
  "alp": ["alp", "fosfatase alcalina", "alkp"],
  "ggt": ["ggt", "gamma-gt"],
  "bilirubin": ["bilirrubina", "bili", "bil"],
  "tsh": ["tsh", "thyrotropin"],
  "t4": ["t4", "thyroxine", "ft4"],
  "t3": ["t3", "triiodothyronine", "ft3"],
  "cortisol": ["cortisol", "hydrocortisone"],
  "prolactin": ["prolactina", "prl"],
  "insulin": ["insulina", "ins"],
  "vitamin_d": ["vitamina d", "25-oh d", "calcidiol"],
  "vitamin_b12": ["vitamina b12", "cobalamina", "b12"],
  "ferritin": ["ferritina", "ferr"],
  "crp": ["pcr", "crp", "c-reactive protein"],
  "epinephrine": ["epinefrina", "adrenaline"],
  "norepinephrine": ["norepinefrina", "noradrenaline"],
  "metanephrine": ["metanefrina", "mn"],
  "vma": ["vma", "vanillylmandelic acid"],
  "5hiaa": ["5-hiaa", "5-hydroxyindoleacetic acid"]
}
core/calculators/infusion.drops_mlh.json
========================================
{
  "id": "infusion.drops_mlh",
  "name": "Gotas/min ↔ mL/h",
  "version": "1.0.0",
  "inputs": [
    {"id": "drops_count", "label": "Gotas contadas", "type": "integer", "unit": "gtt", "min": 1, "max": null},
    {"id": "time_seconds", "label": "Tempo de contagem", "type": "number", "unit": "s", "min": 1, "max": null},
    {"id": "drop_factor", "label": "Fator de gotejamento (gtt/mL)", "type": "number", "unit": "gtt/mL", "min": 5, "max": 120, "default": 20}
  ],
  "expressions": {
    "gtt_per_min": "drops_count / (time_seconds / 60)",
    "ml_per_h": "(gtt_per_min / drop_factor) * 60"
  },
  "outputs": [
    {"id": "gtt_per_min", "unit": "gtt/min", "decimals": 0},
    {"id": "ml_per_h", "unit": "mL/h", "decimals": 1}
  ],
  "examples": [
    {"in": {"drops_count": 20, "time_seconds": 60, "drop_factor": 20}, "out": {"gtt_per_min": 20, "ml_per_h": 60.0}},
    {"in": {"drops_count": 30, "time_seconds": 30, "drop_factor": 10}, "out": {"gtt_per_min": 60, "ml_per_h": 360.0}},
    {"in": {"drops_count": 15, "time_seconds": 60, "drop_factor": 60}, "out": {"gtt_per_min": 15, "ml_per_h": 15.0}},
    {"in": {"drops_count": 5, "time_seconds": 10, "drop_factor": 20}, "out": {"gtt_per_min": 30, "ml_per_h": 90.0}},
    {"in": {"drops_count": 100, "time_seconds": 120, "drop_factor": 15}, "out": {"gtt_per_min": 50, "ml_per_h": 200.0}}
  ],
  "notes": "Baseado em Whitebook. Modo tap: conte gotas tocando; pare para calcular. Validação: drop_factor típico 10-60.",
  "references": ["Whitebook Calculadoras de Infusão", "UpToDate IV Infusion Rates"]
}
core/calculators/infusion.mcgkgmin_mlh.json
===========================================
{
  "id": "infusion.mcgkgmin_mlh",
  "name": "μg/kg/min ↔ mL/h",
  "version": "1.0.0",
  "inputs": [
    {"id": "rate_mcgkgmin", "label": "Taxa de infusão", "type": "number", "unit": "µg/kg/min", "min": 0.001, "max": null},
    {"id": "weight_kg", "label": "Peso do paciente", "type": "number", "unit": "kg", "min": 0.1, "max": 300},
    {"id": "concentration_mg_ml", "label": "Concentração da solução", "type": "number", "unit": "mg/mL", "min": 0.001, "max": null}
  ],
  "expressions": {
    "ml_per_h": "(rate_mcgkgmin * weight_kg * 60) / (1000 * concentration_mg_ml)"
  },
  "outputs": [
    {"id": "ml_per_h", "unit": "mL/h", "decimals": 2}
  ],
  "examples": [
    {"in": {"rate_mcgkgmin": 0.1, "weight_kg": 70, "concentration_mg_ml": 0.08}, "out": {"ml_per_h": 5.25}},
    {"in": {"rate_mcgkgmin": 1, "weight_kg": 50, "concentration_mg_ml": 1}, "out": {"ml_per_h": 3.0}},
    {"in": {"rate_mcgkgmin": 0.05, "weight_kg": 100, "concentration_mg_ml": 0.1}, "out": {"ml_per_h": 3.0}},
    {"in": {"rate_mcgkgmin": 2, "weight_kg": 60, "concentration_mg_ml": 2}, "out": {"ml_per_h": 3.6}},
    {"in": {"rate_mcgkgmin": 0.01, "weight_kg": 80, "concentration_mg_ml": 0.01}, "out": {"ml_per_h": 4.8}}
  ],
  "notes": "Fórmula reversa: rate = (ml_per_h * concentration_mg_ml * 1000) / (60 * weight_kg). De Whitebook.",
  "references": ["Whitebook Cálculo de Infusão BI (mcg/kg/min)"]
}
core/calculators/infusion.mcgkgmin_gttmin.json
==============================================
{
  "id": "infusion.mcgkgmin_gttmin",
  "name": "μg/kg/min ↔ gtt/min",
  "version": "1.0.0",
  "inputs": [
    {"id": "rate_mcgkgmin", "label": "Taxa de infusão", "type": "number", "unit": "µg/kg/min", "min": 0.001, "max": null},
    {"id": "weight_kg", "label": "Peso do paciente", "type": "number", "unit": "kg", "min": 0.1, "max": 300},
    {"id": "concentration_mg_ml", "label": "Concentração da solução", "type": "number", "unit": "mg/mL", "min": 0.001, "max": null},
    {"id": "drop_factor", "label": "Fator de gotejamento", "type": "number", "unit": "gtt/mL", "min": 5, "max": 120, "default": 20}
  ],
  "expressions": {
    "ml_per_h": "(rate_mcgkgmin * weight_kg * 60) / (1000 * concentration_mg_ml)",
    "gtt_per_min": "(ml_per_h / 60) * drop_factor"
  },
  "outputs": [
    {"id": "gtt_per_min", "unit": "gtt/min", "decimals": 0}
  ],
  "examples": [
    {"in": {"rate_mcgkgmin": 0.1, "weight_kg": 70, "concentration_mg_ml": 0.08, "drop_factor": 20}, "out": {"gtt_per_min": 105}},
    {"in": {"rate_mcgkgmin": 1, "weight_kg": 50, "concentration_mg_ml": 1, "drop_factor": 10}, "out": {"gtt_per_min": 5}},
    {"in": {"rate_mcgkgmin": 0.05, "weight_kg": 100, "concentration_mg_ml": 0.1, "drop_factor": 60}, "out": {"gtt_per_min": 30}},
    {"in": {"rate_mcgkgmin": 2, "weight_kg": 60, "concentration_mg_ml": 2, "drop_factor": 15}, "out": {"gtt_per_min": 9}},
    {"in": {"rate_mcgkgmin": 0.01, "weight_kg": 80, "concentration_mg_ml": 0.01, "drop_factor": 20}, "out": {"gtt_per_min": 16}}
  ],
  "notes": "Combina mcgkgmin_mlh com drops_mlh. Fórmula reversa análoga. De Whitebook.",
  "references": ["Whitebook Conversão de Gotas/min para mL/h + BI"]
}
core/tests/units_roundtrip.cases.json
=====================================
[
  {"test": "glucose 180 mg/dL -> mmol/L -> mg/dL", "value": 180, "from": "mg/dL", "to": "mmol/L", "analyte": "glucose", "expected_inter": 9.99, "roundtrip": 180, "relTol": 0.01},
  {"test": "creatinine 1 mg/dL -> µmol/L -> mg/dL", "value": 1, "from": "mg/dL", "to": "µmol/L", "analyte": "creatinine", "expected_inter": 88.4, "roundtrip": 1, "relTol": 0.001},
  {"test": "calcium 2 mmol/L -> mEq/L -> mmol/L", "value": 2, "from": "mmol/L", "to": "mEq/L", "analyte": "calcium", "expected_inter": 4, "roundtrip": 2, "relTol": 1e-9},
  {"test": "ALT 60 U/L -> µkat/L -> U/L", "value": 60, "from": "U/L", "to": "µkat/L", "analyte": "alt", "expected_inter": 1.0, "roundtrip": 60, "relTol": 0.01},
  {"test": "bilirubin 1 mg/dL -> µmol/L -> mg/dL", "value": 1, "from": "mg/dL", "to": "µmol/L", "analyte": "bilirubin", "expected_inter": 17.1, "roundtrip": 1, "relTol": 0.001}
]
core/tests/infusion_drops.cases.json
====================================
[
  {"in": {"drops_count": 20, "time_seconds": 60, "drop_factor": 20}, "out": {"gtt_per_min": 20, "ml_per_h": 60.0}, "absTol": 0.1},
  {"in": {"drops_count": 30, "time_seconds": 30, "drop_factor": 10}, "out": {"gtt_per_min": 60, "ml_per_h": 360.0}, "absTol": 0.1},
  {"in": {"drops_count": 15, "time_seconds": 60, "drop_factor": 60}, "out": {"gtt_per_min": 15, "ml_per_h": 15.0}, "absTol": 0.1},
  {"in": {"drops_count": 5, "time_seconds": 10, "drop_factor": 20}, "out": {"gtt_per_min": 30, "ml_per_h": 90.0}, "absTol": 0.1},
  {"in": {"drops_count": 100, "time_seconds": 120, "drop_factor": 15}, "out": {"gtt_per_min": 50, "ml_per_h": 200.0}, "absTol": 0.1}
]
core/tests/infusion_mcgkgmin_mlh.cases.json
===========================================
[
  {"in": {"rate_mcgkgmin": 0.1, "weight_kg": 70, "concentration_mg_ml": 0.08}, "out": {"ml_per_h": 5.25}, "absTol": 0.01},
  {"in": {"rate_mcgkgmin": 1, "weight_kg": 50, "concentration_mg_ml": 1}, "out": {"ml_per_h": 3.0}, "absTol": 0.01},
  {"in": {"rate_mcgkgmin": 0.05, "weight_kg": 100, "concentration_mg_ml": 0.1}, "out": {"ml_per_h": 3.0}, "absTol": 0.01},
  {"in": {"rate_mcgkgmin": 2, "weight_kg": 60, "concentration_mg_ml": 2}, "out": {"ml_per_h": 3.6}, "absTol": 0.01},
  {"in": {"rate_mcgkgmin": 0.01, "weight_kg": 80, "concentration_mg_ml": 0.01}, "out": {"ml_per_h": 4.8}, "absTol": 0.01}
]
core/tests/infusion_mcgkgmin_gttmin.cases.json
==============================================
[
  {"in": {"rate_mcgkgmin": 0.1, "weight_kg": 70, "concentration_mg_ml": 0.08, "drop_factor": 20}, "out": {"gtt_per_min": 105}, "absTol": 1},
  {"in": {"rate_mcgkgmin": 1, "weight_kg": 50, "concentration_mg_ml": 1, "drop_factor": 10}, "out": {"gtt_per_min": 5}, "absTol": 1},
  {"in": {"rate_mcgkgmin": 0.05, "weight_kg": 100, "concentration_mg_ml": 0.1, "drop_factor": 60}, "out": {"gtt_per_min": 30}, "absTol": 1},
  {"in": {"rate_mcgkgmin": 2, "weight_kg": 60, "concentration_mg_ml": 2, "drop_factor": 15}, "out": {"gtt_per_min": 9}, "absTol": 1},
  {"in": {"rate_mcgkgmin": 0.01, "weight_kg": 80, "concentration_mg_ml": 0.01, "drop_factor": 20}, "out": {"gtt_per_min": 16}, "absTol": 1}
]
core/api/openapi.yaml
=====================
openapi: 3.0.0
info:
  title: Núcleo de Conversões API
  version: 1.0.0
paths:
  /convert/units:
    post:
      summary: Convert unit
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                value: {type: number}
                from: {type: string}
                to: {type: string}
                analyte: {type: string}
                valence: {type: integer}
      responses:
        '200':
          description: Converted value
          content:
            application/json:
              schema:
                type: object
                properties:
                  value: {type: number}
                  unit: {type: string}
  /calculators:
    get:
      summary: List calculators
      responses:
        '200':
          description: List of calculator IDs
  /calculators/{id}:
    get:
      summary: Get calculator schema
      parameters:
        - name: id
          in: path
          required: true
          schema: {type: string}
      responses:
        '200':
          description: Schema JSON
  /calculators/{id}/compute:
    post:
      summary: Compute calculator
      parameters:
        - name: id
          in: path
          required: true
          schema: {type: string}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                inputs: {type: object}
                options: {type: object}
      responses:
        '200':
          description: Result
          content:
            application/json:
              schema:
                type: object
                properties:
                  outputs: {type: object}
                  explanation: {type: string}
core/api/examples/convert_units.request.json
============================================
{
  "value": 180,
  "from": "mg/dL",
  "to": "mmol/L",
  "analyte": "glucose"
}
core/api/examples/compute_infusions.request.json
================================================
{
  "inputs": {
    "rate_mcgkgmin": 0.1,
    "weight_kg": 70,
    "concentration_mg_ml": 0.08
  },
  "options": {
    "output_units": {
      "rate": "mL/h"
    }
  }
}
# Relatório: Planejamento Avançado de Domínios e Organização de Calculadoras no Health Guardian

## Introdução
O Health Guardian (HG) visa integrar calculadoras, conversores e escores clínicos para suporte à decisão médica, baseando-se em fontes como Whitebook e UpToDate. A partir dos documentos fornecidos, concluo que o sistema deve priorizar módulos para obstetrícia (ex.: idade gestacional pela DUM/USG), pediatria (ex.: controle da asma GINA, escore APGAR), gerais (ex.: clearance de creatinina, conversões de infusão) e interpretações laboratoriais (ex.: LDH alto, lipídios anormais).

Para organização, propõe-se agrupamentos que minimizem redundâncias (ex.: variáveis como peso/creatinina compartilhadas) e facilitem buscas na aba de conhecimento. A análise incorpora fontes internas (trechos Whitebook/UpToDate) e externas (pesquisa PubMed via ferramenta web_search, query: "recommended practices for grouping medical calculators in clinical decision support systems PubMed", retornando 20 resultados relevantes, como Sutton 2020 e Ventola 2014).

Fontes internas destacam fórmulas específicas (ex.: DUM + 280 dias para data parto; Cockcroft-Gault para CrCl). Externas enfatizam benefícios de CDSS agrupados por workflow (Sutton RT et al., 2020) e riscos de fragmentação (Kesselheim AS et al., 2011).

## Metodologia
### Revisão Interna
Documentos analisados:
- Obstétricas: Fórmulas para idade gestacional (DUM/USG), data parto (Naegele).
- Pediátricas: Escores (Asma GINA, APGAR, Finnegan), CrCl, IMC Z-score.
- Gerais: Conversões infusão (mcg/kg/min ↔ mL/h), ajuste vancomicina, lab (LDH alto, lipídios).
- UpToDate: Lab interpretations (LDH, lipídios, CA125) e calculadoras (APGAR, AUDIT, eosinófilos absolutos).

Variáveis comuns: Peso, idade, creatinina, datas, sexo.

### Pesquisa Externa
Usando web_search, identifiquei 20 artigos (ex.: Sutton 2020: "An overview of clinical decision support systems"; Ventola 2014: "Mobile Devices and Apps for Health Care Professionals"). Foco em práticas para agrupar calculadoras em CDSS, com ênfase em usabilidade e redução de erros.

## Propostas de Agrupamento
### Alternativa 1: Por Especialidade
- Obstetrícia, Pediatria, Nefrologia, etc.
- Justificativa: Intuitivo (Ventola 2014); aligns with Whitebook grouping.

### Alternativa 2: Por Tipo
- Numéricas, Escores, Conversores.
- Justificativa: Reduz redundância (Kesselheim 2011).

### Alternativa 3: Híbrido (Recomendada)
- Principal por especialidade, sub por tipo.
- Justificativa: Flexível (Sutton 2020); integra internas (Whitebook) com externas (MDCalc app).

## Tabelas
### Variáveis e Tags
| Variável | Tags | Domínio |
|----------|------|---------|
| Peso | [mass, kg] | Pediatria, Infusão |

## Discussão
Prós/Contras baseados em PubMed (ex.: Sutton: benefícios de workflow).

## Conclusões
Adote híbrido para escalabilidade. Integre com aba de conhecimento via tags. Evidências suportam redução de erros (Ventola 2014).
